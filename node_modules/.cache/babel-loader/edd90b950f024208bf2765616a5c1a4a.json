{"ast":null,"code":"const REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\nconst reducer = ( // 기본값 설정\nstate = {\n  // foundamental \n  ready: {\n    planTeam: false\n  },\n  loading: {\n    planTeam: false\n  },\n  notification: [// 이상하게 처음에 빈 어레이이면 reducer로 state 변화시킬때 이상하게 작동한다\n  {\n    situation: \"success\",\n    message: \"welcome to \",\n    idNotification: action.idNotification\n  }],\n  // others\n  planTeam: {},\n  themeName: \"light\"\n}, // 액션별로 새로운 state 반환하기\naction) => {\n  switch (action.type) {\n    case REPLACE_DATA:\n      return { ...state,\n        [action.which]: action.data\n      };\n\n    case REPLACE_READY:\n      return { ...state,\n        ready: { ...state.ready,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_LOADING:\n      return { ...state,\n        loading: { ...state.loading,\n          [action.which]: action.true_false\n        }\n      };\n\n    case ADD_NOTIFICATION:\n      return { ...state,\n        notification: [\"hahaha\"]\n      };\n\n    /*\n    {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n    */\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/reducer.js"],"names":["REPLACE_READY","REPLACE_LOADING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","reducer","state","ready","planTeam","loading","notification","situation","message","idNotification","action","themeName","type","which","data","true_false","filter","element"],"mappings":"AAAA,MAAMA,aAAa,GAAG,eAAtB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;;AAEA,MAAMC,OAAO,GAAG,EAEd;AACAC,KAAK,GAAG;AAEN;AACAC,EAAAA,KAAK,EAAG;AACNC,IAAAA,QAAQ,EAAE;AADJ,GAHF;AAONC,EAAAA,OAAO,EAAG;AACRD,IAAAA,QAAQ,EAAE;AADF,GAPJ;AAWNE,EAAAA,YAAY,EAAG,CAAE;AACf;AACEC,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,cAAc,EAAEC,MAAM,CAACD;AAHzB,GADa,CAXT;AAoBN;AACAL,EAAAA,QAAQ,EAAE,EArBJ;AAuBNO,EAAAA,SAAS,EAAE;AAvBL,CAHM,EA8Bd;AACAD,MA/Bc,KA+BH;AAEX,UAAQA,MAAM,CAACE,IAAf;AAEE,SAAKd,YAAL;AACE,aAAO,EACN,GAAGI,KADG;AAEN,SAACQ,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACI;AAFjB,OAAP;;AAKF,SAAKlB,aAAL;AACE,aAAO,EACN,GAAGM,KADG;AAENC,QAAAA,KAAK,EAAE,EACL,GAAGD,KAAK,CAACC,KADJ;AAEL,WAACO,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACK;AAFlB;AAFD,OAAP;;AAQF,SAAKlB,eAAL;AACE,aAAO,EACN,GAAGK,KADG;AAENG,QAAAA,OAAO,EAAE,EACP,GAAGH,KAAK,CAACG,OADF;AAEP,WAACK,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACK;AAFhB;AAFH,OAAP;;AAQF,SAAKhB,gBAAL;AACE,aAAO,EACN,GAAGG,KADG;AAGNI,QAAAA,YAAY,EAAE,CACZ,QADY;AAHR,OAAP;;AAQF;;;;;;;;;AAQA,SAAKN,mBAAL;AACE,aAAO,EACN,GAAGE,KADG;AAENI,QAAAA,YAAY,EAAEJ,KAAK,CAACI,YAAN,CAAmBU,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACR,cAAR,KAA2BC,MAAM,CAACD,cAAvE;AAFR,OAAP;;AAQF;AACE,aAAOP,KAAP;AArDJ;AAuDD,CAxFD;;AA2FA,eAAeD,OAAf","sourcesContent":["const REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\nconst reducer = (\n  \n  // 기본값 설정\n  state = { \n    \n    // foundamental \n    ready : {\n      planTeam: false\n    },\n    \n    loading : {\n      planTeam: false\n    }, \n    \n    notification : [ // 이상하게 처음에 빈 어레이이면 reducer로 state 변화시킬때 이상하게 작동한다\n      {\n        situation: \"success\"\n  \t    ,message: \"welcome to \"\n  \t    ,idNotification: action.idNotification\n      }\n    ],\n    \n    \n    // others\n    planTeam: {},\n    \n    themeName: \"light\"\n    \n  }, \n  \n  // 액션별로 새로운 state 반환하기\n  action) => {\n    \n  switch (action.type) {\n    \n    case REPLACE_DATA:\n      return {\n      \t...state, \n      \t[action.which]: action.data\n      };\n      \n    case REPLACE_READY:\n      return {\n      \t...state, \n      \tready: {\n      \t  ...state.ready,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_LOADING:\n      return {\n      \t...state, \n      \tloading: {\n      \t  ...state.loading,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case ADD_NOTIFICATION:\n      return {\n      \t...state, \n      \t\n      \tnotification: [\n      \t  \"hahaha\"\n      \t]\n      \t\n      };\n    /*\n    {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n    */\n    case REMOVE_NOTIFICATION:\n      return {\n      \t...state, \n      \tnotification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n    \n    \n    \n    \n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}