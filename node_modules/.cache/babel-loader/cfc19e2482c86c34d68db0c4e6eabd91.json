{"ast":null,"code":"var _jsxFileName = \"/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js\";\nimport dotenv from 'dotenv';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { addResult } from \"../../redux/store\";\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\";\nimport addRemoveNotification from \"../../redux/thunks/addRemoveNotification\"; // https://reacttraining.com/blog/react-router-v5-1/\n\nimport { Div, Table, Tr, Td } from '../../styles/DefaultStyles';\nimport IconLoading from '../../svgs/IconLoading';\nimport IconConfirmed from '../../svgs/IconConfirmed';\nimport IconPending from '../../svgs/IconPending';\nimport IconInfo from '../../svgs/IconInfo';\nimport IconMagic from '../../svgs/basic/IconMagic';\nimport { getRandomSubArray } from '../../tools/vanilla/array';\nconst DivResult = styled(Div)`\n  width: 100%;\n  max-width: 600px;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n  padding-bottom: 10px;\n`;\nconst DivTitle = styled(Div)`\n  margin-top: 10px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  \n  margin-bottom: 10px;\n`;\nconst DivGenerate = styled(Div)`\n  height: 40px;\n`;\nconst ButtonMagic = styled(Button)`\n  \n`;\n\nconst Result = ({\n  option,\n  listPlayerEntry,\n  addRemoveNotification\n}) => {\n  const region = option.region;\n  const numberTeamsPlanned = option.numberTeams;\n  let numberTeamsResult = numberTeamsPlanned;\n  const listPlayerBattletag = Object.keys(listPlayerEntry).map(element => listPlayerEntry[element]._id); // list of battletags, this can be modified by .sort\n\n  let listBattletagPlaying = [];\n  let listBattletagPlayingSorted = []; // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\n\n  const onClick_generateTeams = event => {\n    //  후반에 쓰게될 정렬 함수\n    const sortListBattletagByMmrHigherFirst = (battletag1, battletag2) => {\n      // mmr 높은순으로 list of battletags\n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag1);\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag2);\n      return objPlayer2.mmr.standard[region] - objPlayer1.mmr.standard[region]; // ex 3333, 222, 1111\n    }; // A. 먼저 leader, confirmed  인 것들 고려해서 총 플레이 인원 뽑기\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\n    // C. 정렬된 플레이러들을, [indexTeam, indextIn5] :  (example of 3 teams)\n    //  [0,0] [1,0] [2,0]   [2,1] [1,1] [0,1]   [0,2] [1,2] [2,2]   [2,3] [1,3 [0,3]  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\n    // A-1\n\n\n    const listBattletagConfirmed = listPlayerBattletag.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.status === \"confirmed\";\n    });\n    const listBattletagConfirmedLeader = listBattletagConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    });\n    const listBattletagConfirmedNonLeader = listBattletagConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\");\n    }); //  먼저 설정된 팀 개수 검토\n\n    if (listBattletagConfirmed.length < numberTeamsPlanned * 5) {\n      addRemoveNotification(\"error\", \"used diffenrt number of teams\");\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\n    } // A-2\n\n\n    if (numberTeamsResult === 0) {\n      addRemoveNotification(\"error\", \"need at least 5 confirmed players\");\n    } else if (listBattletagConfirmedLeader.length >= numberTeamsPlanned * 5) {\n      listBattletagPlaying = getRandomSubArray(listBattletagConfirmedLeader, numberTeamsPlanned * 5);\n    } else {\n      const numberConfirmedLeader = listBattletagConfirmedLeader.length;\n      const listBattletagConfirmedNonLeaderPlaying = getRandomSubArray(listBattletagConfirmedNonLeader, numberTeamsPlanned * 5 - numberConfirmedLeader);\n      listBattletagPlaying = [...listBattletagConfirmedLeader, ...listBattletagConfirmedNonLeaderPlaying];\n    } // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\n\n\n    let listBattletagPlayingLeader = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    });\n    listBattletagPlayingLeader = listBattletagPlayingLeader.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2));\n    let listBattletagPlayingLessRoles = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\") && objPlayer.roles.length <= 2;\n    });\n    listBattletagPlayingLessRoles = listBattletagPlayingLessRoles.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2));\n    let listBattletagPlayingTheOthers = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !(objPlayer.roles.length <= 2) && !objPlayer.tags.includes(\"leader\");\n    });\n    listBattletagPlayingTheOthers = listBattletagPlayingTheOthers.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2)); // finally\n\n    listBattletagPlayingSorted = [...listBattletagPlayingLeader, ...listBattletagPlayingLessRoles, ...listBattletagPlayingTheOthers];\n    console.log(`listBattletagPlayingSorted`);\n    console.log(listBattletagPlayingSorted); // C. 정렬된 플레이러들을, [indexTeam, indextIn5] :  (example of 3 teams)\n    //  [0,0] [1,0] [2,0]   [2,1] [1,1] [0,1]   [0,2] [1,2] [2,2]   [2,3] [1,3 [0,3]  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\n  };\n\n  return /*#__PURE__*/React.createElement(DivResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(DivTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, \" Result \"), /*#__PURE__*/React.createElement(DivGenerate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, \" Generate Teams \"), /*#__PURE__*/React.createElement(ButtonMagic, {\n    onClick: onClick_generateTeams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconMagic, {\n    width: \"36px\",\n    height: \"36px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }), \"   \")));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    option: state.planTeam.option,\n    listPlayerEntry: state.planTeam.listPlayerEntry //listPlayerEntry: [...state.planTeam.listPlayerEntry]\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\n    //,readyPlanTeam: state.ready.planTeam\n    //,loading: state.loading\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addResult: resultTeam => dispatch(addResult(resultTeam)),\n    addRemoveNotification: (situation, message, time) => dispatch(addRemoveNotification(situation, message, time))\n  };\n} // TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js"],"names":["dotenv","React","useState","useEffect","styled","axios","NavLink","useParams","connect","addResult","readPlanTeam","addRemoveNotification","Div","Table","Tr","Td","IconLoading","IconConfirmed","IconPending","IconInfo","IconMagic","getRandomSubArray","DivResult","DivTitle","DivGenerate","ButtonMagic","Button","Result","option","listPlayerEntry","region","numberTeamsPlanned","numberTeams","numberTeamsResult","listPlayerBattletag","Object","keys","map","element","_id","listBattletagPlaying","listBattletagPlayingSorted","onClick_generateTeams","event","sortListBattletagByMmrHigherFirst","battletag1","battletag2","objPlayer1","find","objPlayer","objPlayer2","mmr","standard","listBattletagConfirmed","filter","battletag","status","listBattletagConfirmedLeader","tags","includes","listBattletagConfirmedNonLeader","length","Math","floor","numberConfirmedLeader","listBattletagConfirmedNonLeaderPlaying","listBattletagPlayingLeader","sort","listBattletagPlayingLessRoles","roles","listBattletagPlayingTheOthers","console","log","mapStateToProps","state","planTeam","mapDispatchToProps","dispatch","resultTeam","situation","message","time"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\r\nimport React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {addResult} from \"../../redux/store\";\r\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\";\r\nimport addRemoveNotification from \"../../redux/thunks/addRemoveNotification\";\r\n// https://reacttraining.com/blog/react-router-v5-1/\r\n\r\nimport {Div, Table, Tr, Td} from '../../styles/DefaultStyles';\r\n\r\nimport IconLoading from '../../svgs/IconLoading'\r\n\r\nimport IconConfirmed from '../../svgs/IconConfirmed'\r\nimport IconPending from '../../svgs/IconPending'\r\nimport IconInfo from '../../svgs/IconInfo'\r\nimport IconMagic from  '../../svgs/basic/IconMagic'\r\n\r\nimport {getRandomSubArray} from  '../../tools/vanilla/array'\r\n\r\n\r\nconst DivResult = styled(Div)`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  \r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst DivTitle = styled(Div)`\r\n  margin-top: 10px;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  \r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst DivGenerate = styled(Div)`\r\n  height: 40px;\r\n`\r\n\r\nconst ButtonMagic = styled(Button)`\r\n  \r\n`\r\n\r\n\r\n\r\n\r\nconst Result = ({\r\n  option, listPlayerEntry\r\n  , addRemoveNotification\r\n}) => {\r\n  \r\n  const region = option.region;\r\n  \r\n  const numberTeamsPlanned = option.numberTeams;\r\n  let numberTeamsResult = numberTeamsPlanned;\r\n  \r\n  const listPlayerBattletag = (Object.keys(listPlayerEntry)).map(element=>listPlayerEntry[element]._id); // list of battletags, this can be modified by .sort\r\n  let listBattletagPlaying = [];\r\n  let listBattletagPlayingSorted = [];\r\n\r\n  // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\r\n  const onClick_generateTeams = (event) => {\r\n    \r\n    //  후반에 쓰게될 정렬 함수\r\n    const sortListBattletagByMmrHigherFirst = (battletag1, battletag2) => {    // mmr 높은순으로 list of battletags\r\n      \r\n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag1)\r\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag2)\r\n      \r\n      return (objPlayer2.mmr.standard[region] - objPlayer1.mmr.standard[region]);\r\n      // ex 3333, 222, 1111\r\n    }\r\n    \r\n    \r\n    // A. 먼저 leader, confirmed  인 것들 고려해서 총 플레이 인원 뽑기\r\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\r\n    // C. 정렬된 플레이러들을, [indexTeam, indextIn5] :  (example of 3 teams)\r\n      //  [0,0] [1,0] [2,0]   [2,1] [1,1] [0,1]   [0,2] [1,2] [2,2]   [2,3] [1,3 [0,3]  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\r\n    \r\n    \r\n    // A-1\r\n    const listBattletagConfirmed = listPlayerBattletag.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( objPlayer.status === \"confirmed\" )\r\n      }\r\n    )\r\n    \r\n    const listBattletagConfirmedLeader = listBattletagConfirmed.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return (objPlayer.tags.includes(\"leader\"))\r\n      }\r\n    )\r\n    \r\n    const listBattletagConfirmedNonLeader = listBattletagConfirmed.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( !(objPlayer.tags.includes(\"leader\")) )\r\n      }\r\n    )\r\n    \r\n    \r\n    //  먼저 설정된 팀 개수 검토\r\n    if ( listBattletagConfirmed.length < (numberTeamsPlanned * 5) ) {\r\n      addRemoveNotification(\"error\", \"used diffenrt number of teams\");\r\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\r\n    }\r\n    \r\n    // A-2\r\n    if (numberTeamsResult === 0) {\r\n      addRemoveNotification(\"error\", \"need at least 5 confirmed players\");\r\n    }\r\n    else if (listBattletagConfirmedLeader.length >= numberTeamsPlanned * 5 ) {\r\n      listBattletagPlaying = getRandomSubArray(listBattletagConfirmedLeader, numberTeamsPlanned * 5 );\r\n    }\r\n    else {\r\n      const numberConfirmedLeader = listBattletagConfirmedLeader.length;\r\n      const listBattletagConfirmedNonLeaderPlaying = getRandomSubArray(listBattletagConfirmedNonLeader, (numberTeamsPlanned * 5 - numberConfirmedLeader) );\r\n      listBattletagPlaying = [...listBattletagConfirmedLeader, ...listBattletagConfirmedNonLeaderPlaying];\r\n    }\r\n    \r\n    \r\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\r\n    let listBattletagPlayingLeader = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( objPlayer.tags.includes(\"leader\") )\r\n      }\r\n    )\r\n    listBattletagPlayingLeader = listBattletagPlayingLeader.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n    \r\n    \r\n    let listBattletagPlayingLessRoles = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( !(objPlayer.tags.includes(\"leader\")) && objPlayer.roles.length <= 2 )\r\n      }\r\n    )\r\n    listBattletagPlayingLessRoles = listBattletagPlayingLessRoles.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n\r\n   \r\n   let listBattletagPlayingTheOthers = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return (  !(objPlayer.roles.length <= 2) && !(objPlayer.tags.includes(\"leader\"))   )\r\n      }\r\n    )\r\n    listBattletagPlayingTheOthers = listBattletagPlayingTheOthers.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n    \r\n    \r\n    // finally\r\n    listBattletagPlayingSorted = [...listBattletagPlayingLeader, ...listBattletagPlayingLessRoles, ...listBattletagPlayingTheOthers];\r\n    \r\n   console.log(`listBattletagPlayingSorted`) \r\n    console.log(listBattletagPlayingSorted) \r\n   // C. 정렬된 플레이러들을, [indexTeam, indextIn5] :  (example of 3 teams)\r\n  //  [0,0] [1,0] [2,0]   [2,1] [1,1] [0,1]   [0,2] [1,2] [2,2]   [2,3] [1,3 [0,3]  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\r\n   \r\n    \r\n  }\r\n  \r\n  \r\n  return (\r\n  \r\n  <DivResult>\r\n    \r\n    <DivTitle> Result </DivTitle>\r\n    \r\n    <DivGenerate>\r\n    \r\n      <Div> Generate Teams </Div>\r\n      <ButtonMagic onClick={onClick_generateTeams}>  \r\n        <IconMagic width={\"36px\"} height={\"36px\"} />   </ButtonMagic>\r\n    \r\n    </DivGenerate>\r\n  \r\n    \r\n    \r\n  </DivResult>\r\n    \r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state) { \r\n  return { \r\n    option: state.planTeam.option\r\n    ,listPlayerEntry: state.planTeam.listPlayerEntry\r\n    //listPlayerEntry: [...state.planTeam.listPlayerEntry]\r\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\r\n    //,readyPlanTeam: state.ready.planTeam\r\n    //,loading: state.loading\r\n  }; \r\n} \r\n\r\nfunction mapDispatchToProps(dispatch) { \r\n  return { \r\n    addResult: (resultTeam) => dispatch( addResult(resultTeam) ) \r\n    ,  addRemoveNotification: (situation, message, time) => dispatch( addRemoveNotification(situation, message, time) )\r\n  }; \r\n}\r\n\r\n\r\n// TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);"]},"metadata":{},"sourceType":"module"}