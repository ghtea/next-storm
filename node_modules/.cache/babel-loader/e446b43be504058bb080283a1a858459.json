{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\nimport reducer from './reducer';\nconst REPLACE_RERENDER = \"REPLACE_RERENDER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nconst ADD_RESULT = \"ADD_RESULT\";\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\nconst REPLACE_PLAYER_STATUS = \"REPLACE_PLAYER_STATUS\"; // fundamental action creator\n\nexport const replaceRerender = which => {\n  return {\n    type: REPLACE_RERENDER,\n    which: which\n  };\n};\nexport const replaceReady = (which, true_false) => {\n  return {\n    type: REPLACE_READY,\n    which: which,\n    true_false: true_false\n  };\n};\nexport const replaceLoading = (which, true_false) => {\n  return {\n    type: REPLACE_LOADING,\n    which: which,\n    true_false: true_false\n  };\n};\nexport const replaceWorking = (which, true_false) => {\n  return {\n    type: REPLACE_WORKING,\n    which: which,\n    true_false: true_false\n  };\n};\nexport const replaceData = (which, newData) => {\n  return {\n    type: REPLACE_DATA,\n    which: which,\n    data: newData\n  };\n};\nexport const addNotification = (situation, message, idNotification) => {\n  return {\n    type: ADD_NOTIFICATION,\n    situation: situation,\n    message: message,\n    idNotification: idNotification\n  };\n};\nexport const removeNotification = idNotification => {\n  return {\n    type: REMOVE_NOTIFICATION,\n    idNotification: idNotification\n  };\n};\nexport const addResult = result => {\n  return {\n    type: ADD_RESULT,\n    result: result\n  };\n};\nexport const replacePlayerTags = (battletag, tag, true_false) => {\n  return {\n    type: REPLACE_PLAYER_TAGS,\n    battletag: battletag,\n    tag: tag,\n    true_false: true_false\n  };\n};\nexport const replacePlayerStatus = (battletag, status) => {\n  return {\n    type: REPLACE_PLAYER_STATUS,\n    battletag: battletag,\n    status: status\n  };\n};\nexport const addRegion = region => {\n  return {\n    type: ADD_RESULT,\n    region: region\n  };\n};\nconst store = createStore(reducer, applyMiddleware(thunk.withExtraArgument(axios), logger));\nexport default store; //https://github.com/nomadcoders/vanilla-redux/blob/ccaa1acd081f27239f2cc8ad3c571bd0a9923f73/src/store.js","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/store.js"],"names":["createStore","applyMiddleware","thunk","logger","axios","dotenv","reducer","REPLACE_RERENDER","REPLACE_READY","REPLACE_LOADING","REPLACE_WORKING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","ADD_RESULT","REPLACE_PLAYER_TAGS","REPLACE_PLAYER_STATUS","replaceRerender","which","type","replaceReady","true_false","replaceLoading","replaceWorking","replaceData","newData","data","addNotification","situation","message","idNotification","removeNotification","addResult","result","replacePlayerTags","battletag","tag","replacePlayerStatus","status","addRegion","region","store","withExtraArgument"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\n\r\nimport reducer from './reducer';\r\n\r\nconst REPLACE_RERENDER = \"REPLACE_RERENDER\";\r\nconst REPLACE_READY = \"REPLACE_READY\";\r\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\r\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\r\n\r\nconst REPLACE_DATA = \"REPLACE_DATA\";\r\n\r\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\r\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\r\n\r\nconst ADD_RESULT = \"ADD_RESULT\";\r\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\r\nconst REPLACE_PLAYER_STATUS = \"REPLACE_PLAYER_STATUS\";\r\n\r\n\r\n\r\n// fundamental action creator\r\nexport const replaceRerender = (which) => {\r\n  return {\r\n    type: REPLACE_RERENDER\r\n    ,which: which\r\n  }\r\n}\r\n\r\nexport const replaceReady = (which, true_false) => {\r\n  return {\r\n    type: REPLACE_READY,\r\n    which: which,\r\n    true_false: true_false\r\n  }\r\n}\r\n\r\nexport const replaceLoading = (which, true_false) => {\r\n  return {\r\n    type: REPLACE_LOADING,\r\n    which: which,\r\n    true_false: true_false\r\n  }\r\n}\r\n\r\nexport const replaceWorking = (which, true_false) => {\r\n  return {\r\n    type: REPLACE_WORKING,\r\n    which: which,\r\n    true_false: true_false\r\n  }\r\n}\r\n\r\nexport const replaceData = (which, newData) => {\r\n  return {\r\n    type: REPLACE_DATA,\r\n    which: which,\r\n    data: newData\r\n  }\r\n  \r\n}\r\n\r\nexport const addNotification = (situation, message, idNotification) => {\r\n  return {\r\n    type: ADD_NOTIFICATION,\r\n    situation: situation,\r\n    message: message,\r\n    idNotification: idNotification\r\n  }\r\n}\r\n\r\nexport const removeNotification = (idNotification) => {\r\n  return {\r\n    type: REMOVE_NOTIFICATION,\r\n    idNotification: idNotification\r\n  }\r\n}\r\n\r\nexport const addResult = (result) => {\r\n  return {\r\n    type: ADD_RESULT,\r\n    result: result\r\n  }\r\n}\r\n\r\nexport const replacePlayerTags = (battletag, tag, true_false) => {\r\n  return {\r\n    type: REPLACE_PLAYER_TAGS,\r\n    battletag: battletag,\r\n    tag: tag,\r\n    true_false: true_false\r\n  }\r\n}\r\n\r\nexport const replacePlayerStatus = (battletag, status) => {\r\n  return {\r\n    type: REPLACE_PLAYER_STATUS,\r\n    battletag: battletag,\r\n    status: status\r\n  }\r\n}\r\n\r\nexport const addRegion = (region) => {\r\n  return {\r\n    type: ADD_RESULT,\r\n    region: region\r\n  }\r\n}\r\n\r\n\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(thunk.withExtraArgument(axios), logger)\r\n)\r\n\r\n\r\nexport default store;\r\n\r\n//https://github.com/nomadcoders/vanilla-redux/blob/ccaa1acd081f27239f2cc8ad3c571bd0a9923f73/src/store.js"]},"metadata":{},"sourceType":"module"}