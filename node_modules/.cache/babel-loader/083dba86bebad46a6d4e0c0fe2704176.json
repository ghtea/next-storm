{"ast":null,"code":"import { getTimeStamp } from '../tools/vanilla/time';\nimport { toggleArrayElement } from '../tools/vanilla/array';\nconst REPLACE_RERENDER = \"REPLACE_RERENDER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nconst ADD_RESULT = \"ADD_RESULT\";\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\nconst stateInitial = {\n  // foundamental \n  rerender: {\n    planTeam: \"\"\n  },\n  ready: {\n    planTeam: false\n  },\n  loading: {\n    planTeam: false\n  },\n  working: {\n    createPlan: false,\n    addPlayer: false,\n    putPlayerMmr: false,\n    addPlayerToListPlayerEntry: false,\n    addPlayerMmrStandardToListPlayerEntry: false\n  },\n  notification: [] // others\n  ,\n  authority: \"unknown\" // \"administrator\" \"viewer\"\n  ,\n  idPlanTeam: \"\",\n  planTeam: {\n    _id: \"_id\",\n    password: \"password\",\n    title: \"title\",\n    listResult: [],\n    listPlayerEntry: [{\n      _id: \"test\",\n      tags: []\n    }]\n  },\n  themeName: \"light\"\n};\n\nconst reducer = ( // 기본값 설정\nstate = stateInitial, // 액션별로 새로운 state 반환하기\naction) => {\n  switch (action.type) {\n    case REPLACE_RERENDER:\n      return { ...state,\n        rerender: { ...state.rerender,\n          [action.which]: getTimeStamp()\n        }\n      };\n\n    case REPLACE_DATA:\n      if (!!action.data && action.data.constructor === Array) {\n        return { ...state,\n          [action.which]: [...action.data]\n        };\n      } else if (!!action.data && action.data.constructor === Object) {\n        return { ...state,\n          [action.which]: { ...action.data\n          }\n        };\n      } else {\n        return { ...state,\n          [action.which]: action.data\n        };\n      }\n\n    case REPLACE_READY:\n      return { ...state,\n        ready: { ...state.ready,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_LOADING:\n      return { ...state,\n        loading: { ...state.loading,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_WORKING:\n      return { ...state,\n        working: { ...state.working,\n          [action.which]: action.true_false\n        }\n      };\n\n    case ADD_NOTIFICATION:\n      return { ...state,\n        notification: [{\n          situation: action.situation,\n          message: action.message,\n          idNotification: action.idNotification\n        }, ...state.notification]\n      };\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n\n    case ADD_RESULT:\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          listResult: [...state.planTeam.listResult, action.result]\n        }\n      };\n\n    case REPLACE_PLAYER_TAGS:\n      const index = state.planTeam.listPlayerEntry.findIndex(objPlayer => objPlayer._id === action.battletag);\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          listPlayerEntry: state.planTeam.listPlayerEntry.map(objPlayer => objPlayer._id === action.battletag ? { ...objPlayer,\n            tags: toggleArrayElement(state.planTeam.listPlayerEntry[index][\"tags\"], action.tag, action.true_false)\n          } : objPlayer)\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/reducer.js"],"names":["getTimeStamp","toggleArrayElement","REPLACE_RERENDER","REPLACE_READY","REPLACE_LOADING","REPLACE_WORKING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","ADD_RESULT","REPLACE_PLAYER_TAGS","stateInitial","rerender","planTeam","ready","loading","working","createPlan","addPlayer","putPlayerMmr","addPlayerToListPlayerEntry","addPlayerMmrStandardToListPlayerEntry","notification","authority","idPlanTeam","_id","password","title","listResult","listPlayerEntry","tags","themeName","reducer","state","action","type","which","data","constructor","Array","Object","true_false","situation","message","idNotification","filter","element","result","index","findIndex","objPlayer","battletag","map","tag"],"mappings":"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","sourcesContent":["import {getTimeStamp} from '../tools/vanilla/time'\nimport {toggleArrayElement} from '../tools/vanilla/array'\n\nconst REPLACE_RERENDER = \"REPLACE_RERENDER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\n\nconst REPLACE_DATA = \"REPLACE_DATA\";\n\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\nconst ADD_RESULT = \"ADD_RESULT\";\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\n\n\nconst stateInitial = { \n    \n    // foundamental \n    rerender: {\n      planTeam: \"\"\n    }\n    \n    ,ready : {\n      planTeam: false\n    }\n    \n    ,loading : {\n      planTeam: false\n    }\n    \n    \n    ,working : {\n      createPlan: false\n      \n      ,addPlayer: false\n      ,putPlayerMmr: false\n      ,addPlayerToListPlayerEntry: false\n      ,addPlayerMmrStandardToListPlayerEntry: false\n    }\n    \n    ,notification : []\n    \n    \n    // others\n    ,authority: \"unknown\" // \"administrator\" \"viewer\"\n    \n    ,idPlanTeam: \"\"\n    \n    ,planTeam: {\n      _id:\"_id\"\n      ,password:\"password\"\n      ,title:\"title\"\n      ,listResult:[]\n      ,listPlayerEntry: [\n        {\n          _id: \"test\"\n          , tags: []\n        }\n      ]\n    }\n    \n    \n    ,themeName: \"light\"\n    \n  };\n\n\n\nconst reducer = (\n  \n  // 기본값 설정\n  state = stateInitial, \n  \n  // 액션별로 새로운 state 반환하기\n  action) => {\n    \n  switch (action.type) {\n    \n    case REPLACE_RERENDER:\n      return {\n      \t...state, \n      \trerender: {\n      \t  ...state.rerender\n      \t  ,[action.which]: getTimeStamp()\n      \t}\n      };\n      \n    case REPLACE_DATA:\n      \n      if ( (!!action.data) && (action.data.constructor === Array) ) {\n        return {\n      \t...state, \n      \t[action.which]: [...action.data]\n        }\n      }\n      \n      else if ( (!!action.data) && (action.data.constructor === Object) ) {\n        return {\n      \t...state, \n      \t[action.which]: {...action.data}\n        }\n      }\n      else {\n        return {\n        \t...state, \n        \t[action.which]: action.data\n        }\n      }\n      \n    case REPLACE_READY:\n      return {\n      \t...state, \n      \tready: {\n      \t  ...state.ready,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_LOADING:\n      return {\n      \t...state, \n      \tloading: {\n      \t  ...state.loading,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_WORKING:\n      return {\n      \t...state, \n      \tworking: {\n      \t  ...state.working,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case ADD_NOTIFICATION:\n      return {\n      \t...state, \n      \t\n      \tnotification: [\n      \t  {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n      \t]\n      \t\n      };\n    \n    case REMOVE_NOTIFICATION:\n      return {\n      \t...state, \n      \tnotification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n    \n    case ADD_RESULT:\n      return {\n      \t...state, \n      \t\n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  , listResult: [\n      \t    ...state.planTeam.listResult\n      \t    , action.result\n      \t  ]\n      \t}\n      \t\n      };\n      \n    case REPLACE_PLAYER_TAGS:\n      \n      const index = (state.planTeam.listPlayerEntry).findIndex( objPlayer => objPlayer._id === action.battletag);\n      \n      return {\n        ...state, \n      \t\n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  \n      \t  , listPlayerEntry: state.planTeam.listPlayerEntry.map(\n      \t      objPlayer => (objPlayer._id === action.battletag)? \n      \t        {...objPlayer, tags:toggleArrayElement(state.planTeam.listPlayerEntry[index][\"tags\"], action.tag, action.true_false) }\n      \t        : objPlayer\n      \t    )\n      \t}\n      }\n    \n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}