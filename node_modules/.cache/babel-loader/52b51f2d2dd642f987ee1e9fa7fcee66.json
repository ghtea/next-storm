{"ast":null,"code":"var _jsxFileName = \"/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js\";\nimport dotenv from 'dotenv';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios'; //import path from 'path'\n\nimport { NavLink, useParams } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { addResult } from \"../../redux/store\";\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\"; // https://reacttraining.com/blog/react-router-v5-1/\n\nimport { Div, Button } from '../../styles/DefaultStyles';\nimport IconLoading from '../../svgs/IconLoading';\nimport IconConfirmed from '../../svgs/IconConfirmed';\nimport IconPending from '../../svgs/IconPending';\nimport IconInfo from '../../svgs/IconInfo';\nimport IconMagic from '../../svgs/basic/IconMagic';\nimport { getRandomSubArray } from '../../tools/vanilla/array'; // 이상하게 dotenv.config() 안해도 된다 (오히려 하면 에러 발생...)\n//dotenv.config() ;\n//dotenv.config({ path: path.join(__dirname, '../../.env') });\n\nconst DivResult = styled(Div)`\n  width: 100%;\n  max-width: 600px;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n  padding-bottom: 10px;\n`;\nconst DivTitle = styled(Div)`\n  margin-top: 10px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  \n  margin-bottom: 10px;\n`;\nconst ButtonMakingResult = styled(Button)`\n  width: 200px;\n  height: 50px;\n`;\nconst DivTableEntry = styled(Div)`\n  \n  padding-left: 20px;\n  padding-right: 20px;\n  \n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n`;\nconst DivIconLoading = styled(Div)`\n  margin-top: 10px;\n`;\n/*\ndisplay:grid;\n*/\n\nconst DivRowHeader = styled(Div)`\n  color: ${props => props.theme.color_weak};\n\n  display: grid;\n  grid-template-columns: 1fr  minmax(40px, 90px) 60px 40px 40px; /* min entire = 400 - 20*2 = 360 */\n  grid-template-rows: 24px;\n  \n  & > Div {\n    font-weight: thin;\n  }\n  //background-color: ${props => props.theme.COLOR_normal};\n   \n  //border-radius:  8px;\n`;\nconst DivRowPlayer = styled(Div)`\n  display: grid;\n  grid-template-columns: 1fr  minmax(40px, 90px) 60px 40px 40px; // min entire = 400 - 20*2 = 360\n  grid-template-rows: 40px;\n  \n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\n  &:last-child {\n    border-bottom-style: none;\n  }\n`;\n/*\nconst DivRowPlayer = styled(Div)`\n  display: grid;\n  grid-template-columns: 1fr 60px ${30*4}px 40px 40px; \n  grid-template-rows: 40px;\n  \n  background-color: ${props => props.theme.COLOR_normal};\n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\n  \n  \n  &:nth-child(2) {\n    border-top-left-radius:    10px;\n    border-top-right-radius:   10px;\n    \n  }\n  \n  &:last-child {\n    border-bottom-right-radius: 10px;\n    border-bottom-left-radius:  10px;\n    \n    border-bottom-style: none;\n    \n  }\n\n*/\n\nconst DivBattletagHeader = styled(Div)`\n  padding-left: 10px;\n  \n  display: block;\n  text-algin: left;\n`;\nconst DivBattletag = styled(Div)`\n  padding-left: 10px;\n  display: block;\n  text-algin: left;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\n\nconst RowPlayer = ({\n  battletag,\n  mmr,\n  statusPlayer\n}) => {\n  useEffect(() => {\n    console.log(\"Each row has been rerendered\");\n  });\n  const IconStatus = {\n    pending: /*#__PURE__*/React.createElement(IconPending, {\n      width: \"20px\",\n      height: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 14\n      }\n    }),\n    confirmed: /*#__PURE__*/React.createElement(IconConfirmed, {\n      width: \"20px\",\n      height: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    })\n  };\n  return /*#__PURE__*/React.createElement(DivRowPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DivBattletag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, battletag), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"(roles)\"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, mmr), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, IconStatus[statusPlayer]), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconInfo, {\n    width: \"20px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst Result = ({\n  listPlayerEntry,\n  option,\n  listResult,\n  addResult\n}) => {\n  // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\n  const onClick_generateTeams = event => {\n    const region = option.region;\n    let listPlayer = Object.keys(listPlayerEntry).map(element => listPlayerEntry[element]._id); // list of battletags\n\n    let orderPlayer = listPlayer.sort((player1, player2) => {\n      // mmr 높은순으로 list of battletags\n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === player1);\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === player2);\n      return objPlayer2.mmr.standard.region - objPlayer1.mmr.standard.region; // ex 3333, 222, 1111\n    });\n    const listPlayerConfirmed = orderPlayer.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.status === \"confirmed\";\n    });\n    const listPlayerConfirmedLeader = listPlayerConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    });\n    const listPlayerConfirmedNonLeader = listPlayerConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\");\n    });\n    let numberTeamsResult = option.numberTeams; // 설정된 팀수가 잘못되었으면, 자동으로 팀수 정해주기\n\n    if (numberTeamsResult === 0 || listPlayerConfirmed.length < option.numberTeams * 5) {\n      numberTeamsResult = Math.floor(listPlayerConfirmed.length / 5);\n    } // 팀 수에 맞는 총인원 목록 정하기\n\n\n    let listPlayerChoosenFinal;\n\n    if (listPlayerConfirmedLeader.length >= numberTeamsResult * 5) {\n      listPlayerChoosenFinal = getRandomSubArray(listPlayerConfirmedLeader, numberTeamsResult * 5);\n    } else {\n      // 리더 + 그외, 로 정해질때 그외 리스트 정하기\n      const listPlayerConfirmedNonLeaderChoosen = getRandomSubArray(listPlayerConfirmedNonLeader, numberTeamsResult * 5 - listPlayerConfirmedLeader.length);\n      listPlayerChoosenFinal = [...listPlayerConfirmedLeader, ...listPlayerConfirmedNonLeaderChoosen];\n    }\n\n    console.log(listPlayerChoosenFinal); // 총목록에서 부분 목록들로 쪼개기\n    // 부분 목록 (1. 리더들, 2. 역할들 적은 사람들. 3. 나머지)\n    // 1. 팀1, 팀2, ...,  팀2, 팀1  로 1. 리더들 배치, \n    // 2. 이어서 역할 수 적은 사람들 배치\n    // 3. 나머지 이어서 배치\n    // leader list\n\n    const listPlayerFinalPartLeader = listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    }); // less roles players list (without leaders)\n\n    const listPlayerFinalPartLessRoles = listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\") && objPlayer.roles.length <= 2;\n    }); // the others list\n\n    const listPlayerFinalPartTheOthers = listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\") && !(objPlayer.roles.length <= 2);\n    }); // 최종적으로 배열 순서로 높여진 플레이어 리스트\n\n    const orderPlayerFinal = [...listPlayerFinalPartLeader, ...listPlayerFinalPartLessRoles, ...listPlayerFinalPartTheOthers];\n    console.log(orderPlayerFinal); // [팀인덱스, 팀내 개인 인덱스]\n\n    let listIndex = []; // 3 팀일때\n    // iIn5:    0                           1                        2\n    // iTeam\n    //    0      1       2           0      1      2            0      1\n    // [0, 0], [1,0], [2, 0],     [2,1], [1, 1], [0,1],      [0, 2], [1,2], ...  \n    // [t, t], [t,0], [f, t],     [f,t], [f, t], [0,t],      [0, 2], [1,2], ...  \n\n    for (let iIn5 = 0; iIn5 < 5; iIn5++) {\n      for (let iTeam = 0; iTeam < numberTeamsResult; iTeam++) {\n        if (iIn5 === 0 || iIn5 === 2 || iIn5 === 4) {\n          listIndex.push([iTeam, iIn5]);\n        } else if (iIn5 === 1 || iIn5 === 3) {\n          listIndex.push([numberTeamsResult - 1 - iTeam, iIn5]);\n        }\n      }\n    }\n\n    let listResult = [];\n    const added = Date.now();\n    listResult.unshift({\n      added: added,\n      listTeam: []\n    });\n\n    for (let iTeam = 0; iTeam < numberTeamsResult; iTeam++) {\n      listResult[0][\"listTeam\"].unshift({\n        name: `team${iTeam + 1}`,\n        listPlayerBattletag: new Array(5)\n      });\n    }\n\n    console.log(orderPlayerFinal);\n\n    for (let iPlayer = 0; iPlayer < orderPlayerFinal.length; iPlayer++) {\n      const indexResult = listResult.findIndex(result => result.added === added);\n      const iTeam = listIndex[iPlayer][0];\n      const iIn5 = listIndex[iPlayer][1];\n      listResult[indexResult][\"listTeam\"][iTeam]['listPlayerBattletag'][iIn5] = orderPlayerFinal[iPlayer];\n    }\n\n    let listMmrSumEachTeam = new Array(5).fill(0);\n\n    for (let iTeam = 0; iTeam < numberTeamsResult; iTeam++) {\n      for (let iIn5 = 0; iIn5 < 4; iIn5++) {\n        const battletag = listResult[0][\"listTeam\"][iTeam]['listPlayerBattletag'][iIn5];\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n        listMmrSumEachTeam[iTeam] += objPlayer.mmr.standard[region];\n      }\n\n      let test = Array.from(Array(numberTeamsResult), (_, i) => i); // https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\n\n      listResult[0][\"listTeam\"][iTeam][\"mmrAverage\"] = mmrAverage;\n      let orderTeam = test.sort((index1, index2) => {\n        // mmr 높은순으로 list of battletags\n        return objPlayer2.mmr.standard.region - objPlayer1.mmr.standard.region; // ex 3333, 222, 1111\n      });\n    }\n\n    console.log(listResult[0]);\n    /*\n    let listTeam;\n    for (var i =0; i<numberTeamsResult; i++) {\n      const teamName = `team${i+1}`;\n      listTeam.push(teamName);\n    }\n    */\n\n    /*\n    {\n      _id: String,\n      listPlayerBattletag: [String],\n      name: String,\n      group: String\n    }\n    */\n\n    /*\n    let team1 = {\n      _id: Date.now()\n      ,listPlayerBattletag: [\"mbcat#1234\", \"mbcat#1703\"]\n      ,name: \"dragon team\"\n    }\n    \n    let resultTeam = {\n      added: Date.now()\n      ,listTeam: [\n        team1\n        \n      ]\n    }\n    \n    addResult(resultTeam);\n    \n    \n    */\n  };\n\n  return /*#__PURE__*/React.createElement(DivResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(DivTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 5\n    }\n  }, \" Result \"), /*#__PURE__*/React.createElement(Div, {\n    onClick: onClick_generateTeams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonMakingResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconMagic, {\n    width: \"40px\",\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }\n  }))));\n};\n/*\n{listResult[0].listTeam.map(element=>\n      <Div> {element} </Div>\n    )}\n*/\n\n/*\n{(readyPlanTeam)? orderPlayerEntry[0][\"_id\"] : \"loading...\" }\n    {(readyPlanTeam)? orderPlayerEntry[9][\"_id\"] : \"loading...\"}\n*/\n\n/*\n\n    <DivTableEntry> \n    \n    <DivRowHeader> \n      <DivBattletagHeader>  battletag </DivBattletagHeader>\n      <Div> roles </Div>\n      <Div> mmr </Div>\n      <Div> status </Div>\n      \n       \n      <Div> </Div>\n    </DivRowHeader>\n    \n    { \n      ( listPlayerEntry ).map( (player, i) =>\n      \n        < RowPlayer \n          key={ `${player._id}_${(new Date().getTime()).toString()}` }\n          battletag={player._id} \n          mmr={player.mmr.standard.NA} \n          statusPlayer={player.status} \n        /> \n      )\n    }\n      \n    </DivTableEntry>\n    \n*/\n//<button onClick= {refetch} > Refectch </button>\n\n\nfunction mapStateToProps(state) {\n  return {\n    listPlayerEntry: state.planTeam.listPlayerEntry,\n    option: state.planTeam.option,\n    listResult: state.planTeam.listResult //listPlayerEntry: [...state.planTeam.listPlayerEntry]\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\n    //,readyPlanTeam: state.ready.planTeam\n    //,loading: state.loading\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addResult: resultTeam => dispatch(addResult(resultTeam))\n  };\n} // TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js"],"names":["dotenv","React","useState","useEffect","styled","axios","NavLink","useParams","connect","addResult","readPlanTeam","Div","Button","IconLoading","IconConfirmed","IconPending","IconInfo","IconMagic","getRandomSubArray","DivResult","DivTitle","ButtonMakingResult","DivTableEntry","DivIconLoading","DivRowHeader","props","theme","color_weak","COLOR_normal","DivRowPlayer","color_very_weak","DivBattletagHeader","DivBattletag","RowPlayer","battletag","mmr","statusPlayer","console","log","IconStatus","pending","confirmed","Result","listPlayerEntry","option","listResult","onClick_generateTeams","event","region","listPlayer","Object","keys","map","element","_id","orderPlayer","sort","player1","player2","objPlayer1","find","objPlayer","objPlayer2","standard","listPlayerConfirmed","filter","status","listPlayerConfirmedLeader","tags","includes","listPlayerConfirmedNonLeader","numberTeamsResult","numberTeams","length","Math","floor","listPlayerChoosenFinal","listPlayerConfirmedNonLeaderChoosen","listPlayerFinalPartLeader","listPlayerFinalPartLessRoles","roles","listPlayerFinalPartTheOthers","orderPlayerFinal","listIndex","iIn5","iTeam","push","added","Date","now","unshift","listTeam","name","listPlayerBattletag","Array","iPlayer","indexResult","findIndex","result","listMmrSumEachTeam","fill","test","from","_","i","mmrAverage","orderTeam","index1","index2","mapStateToProps","state","planTeam","mapDispatchToProps","dispatch","resultTeam"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n//import path from 'path'\nimport { NavLink, useParams } from 'react-router-dom';\n\nimport { connect } from \"react-redux\";\n\nimport {addResult} from \"../../redux/store\";\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\";\n// https://reacttraining.com/blog/react-router-v5-1/\n\nimport {Div, Button} from '../../styles/DefaultStyles';\n\nimport IconLoading from '../../svgs/IconLoading'\n\nimport IconConfirmed from '../../svgs/IconConfirmed'\nimport IconPending from '../../svgs/IconPending'\nimport IconInfo from '../../svgs/IconInfo'\nimport IconMagic from '../../svgs/basic/IconMagic'\n\nimport {getRandomSubArray} from '../../tools/vanilla/array'\n\n// 이상하게 dotenv.config() 안해도 된다 (오히려 하면 에러 발생...)\n//dotenv.config() ;\n//dotenv.config({ path: path.join(__dirname, '../../.env') });\n\nconst DivResult = styled(Div)`\n  width: 100%;\n  max-width: 600px;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n  padding-bottom: 10px;\n`;\n\nconst DivTitle = styled(Div)`\n  margin-top: 10px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  \n  margin-bottom: 10px;\n`\n\nconst ButtonMakingResult = styled(Button)`\n  width: 200px;\n  height: 50px;\n`\n\nconst DivTableEntry = styled(Div)`\n  \n  padding-left: 20px;\n  padding-right: 20px;\n  \n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n`\n\nconst DivIconLoading = styled(Div)`\n  margin-top: 10px;\n`\n\n/*\ndisplay:grid;\n*/\n\nconst DivRowHeader = styled(Div)`\n  color: ${props => props.theme.color_weak};\n\n  display: grid;\n  grid-template-columns: 1fr  minmax(40px, 90px) 60px 40px 40px; /* min entire = 400 - 20*2 = 360 */\n  grid-template-rows: 24px;\n  \n  & > Div {\n    font-weight: thin;\n  }\n  //background-color: ${props => props.theme.COLOR_normal};\n   \n  //border-radius:  8px;\n`\n\n\nconst DivRowPlayer = styled(Div)`\n  display: grid;\n  grid-template-columns: 1fr  minmax(40px, 90px) 60px 40px 40px; // min entire = 400 - 20*2 = 360\n  grid-template-rows: 40px;\n  \n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\n  &:last-child {\n    border-bottom-style: none;\n  }\n`\n\n/*\nconst DivRowPlayer = styled(Div)`\n  display: grid;\n  grid-template-columns: 1fr 60px ${30*4}px 40px 40px; \n  grid-template-rows: 40px;\n  \n  background-color: ${props => props.theme.COLOR_normal};\n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\n  \n  \n  &:nth-child(2) {\n    border-top-left-radius:    10px;\n    border-top-right-radius:   10px;\n    \n  }\n  \n  &:last-child {\n    border-bottom-right-radius: 10px;\n    border-bottom-left-radius:  10px;\n    \n    border-bottom-style: none;\n    \n  }\n\n*/\n\n\nconst DivBattletagHeader = styled(Div)`\n  padding-left: 10px;\n  \n  display: block;\n  text-algin: left;\n`\n\nconst DivBattletag = styled(Div)`\n  padding-left: 10px;\n  display: block;\n  text-algin: left;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\n\n\n\nconst RowPlayer = ({battletag, mmr, statusPlayer}) => {\n  \n  useEffect(()=>{console.log(\"Each row has been rerendered\")})\n  \n  const IconStatus = {\n    pending: <IconPending width={\"20px\"} height={\"20px\"} />\n    ,confirmed: <IconConfirmed width={\"20px\"} height={\"20px\"} />\n  };\n\n  return (\n    \n    <DivRowPlayer >\n      \n      <DivBattletag> \n        {battletag}\n      </DivBattletag>\n      \n      <Div> \n        (roles)\n      </Div>\n      \n      \n      <Div> \n        {mmr}\n      </Div>\n       \n      <Div> \n        {IconStatus[statusPlayer]}\n      </Div>\n        \n       \n      <Div> \n        <IconInfo\n          width={\"20px\"}\n          height={\"20px\"}\n        /> \n      </Div>\n         \n    </DivRowPlayer>\n  )\n}\n\n\n\n\n\n\nconst Result = ({\n  listPlayerEntry, option, listResult\n  , addResult\n  \n}) => {\n  \n  \n\n  \n  \n  // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\n  const onClick_generateTeams = (event) => {\n    \n    const region = option.region;\n    let listPlayer = (Object.keys(listPlayerEntry)).map(element=>listPlayerEntry[element]._id); // list of battletags\n    \n    let orderPlayer = listPlayer.sort( (player1, player2) => {    // mmr 높은순으로 list of battletags\n      \n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === player1)\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === player2)\n      \n      return (objPlayer2.mmr.standard.region - objPlayer1.mmr.standard.region);\n      // ex 3333, 222, 1111\n    });\n    \n    \n    const listPlayerConfirmed = orderPlayer.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return objPlayer.status === \"confirmed\"\n    } )\n  \n    const listPlayerConfirmedLeader = listPlayerConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return objPlayer.tags.includes(\"leader\");\n    } )\n    \n    const listPlayerConfirmedNonLeader= listPlayerConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return !(objPlayer.tags.includes(\"leader\"));\n    } )\n    \n    \n    let numberTeamsResult = option.numberTeams;    // 설정된 팀수가 잘못되었으면, 자동으로 팀수 정해주기\n    if ((numberTeamsResult === 0) || listPlayerConfirmed.length < option.numberTeams * 5) {\n      numberTeamsResult =  Math.floor( listPlayerConfirmed.length / 5 );\n    }\n    \n    \n    // 팀 수에 맞는 총인원 목록 정하기\n    let listPlayerChoosenFinal;\n    if ( listPlayerConfirmedLeader.length >= numberTeamsResult * 5 ) {  \n      listPlayerChoosenFinal = getRandomSubArray(listPlayerConfirmedLeader, numberTeamsResult * 5) \n    }\n    else {  \n      // 리더 + 그외, 로 정해질때 그외 리스트 정하기\n      const listPlayerConfirmedNonLeaderChoosen = getRandomSubArray(listPlayerConfirmedNonLeader, (numberTeamsResult * 5 - listPlayerConfirmedLeader.length ) );\n      listPlayerChoosenFinal = [...listPlayerConfirmedLeader, ...listPlayerConfirmedNonLeaderChoosen];\n    }\n    \n    console.log(listPlayerChoosenFinal);\n    \n    // 총목록에서 부분 목록들로 쪼개기\n    // 부분 목록 (1. 리더들, 2. 역할들 적은 사람들. 3. 나머지)\n    \n    // 1. 팀1, 팀2, ...,  팀2, 팀1  로 1. 리더들 배치, \n    // 2. 이어서 역할 수 적은 사람들 배치\n    // 3. 나머지 이어서 배치\n    \n    // leader list\n    const listPlayerFinalPartLeader= listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return (objPlayer.tags.includes(\"leader\"));\n    } )\n    \n    // less roles players list (without leaders)\n    const listPlayerFinalPartLessRoles= listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return ( !(objPlayer.tags.includes(\"leader\")) && (objPlayer.roles.length <= 2) );\n    } )\n    \n    // the others list\n    const listPlayerFinalPartTheOthers= listPlayerChoosenFinal.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n      return ( !(objPlayer.tags.includes(\"leader\")) && !(objPlayer.roles.length <= 2) );\n    } )\n    \n    // 최종적으로 배열 순서로 높여진 플레이어 리스트\n    const orderPlayerFinal = [...listPlayerFinalPartLeader, ...listPlayerFinalPartLessRoles, ...listPlayerFinalPartTheOthers]\n    \n     console.log(orderPlayerFinal);\n    \n    \n    // [팀인덱스, 팀내 개인 인덱스]\n    let listIndex = [];\n   \n    // 3 팀일때\n    \n    // iIn5:    0                           1                        2\n    \n    // iTeam\n    //    0      1       2           0      1      2            0      1\n    // [0, 0], [1,0], [2, 0],     [2,1], [1, 1], [0,1],      [0, 2], [1,2], ...  \n    // [t, t], [t,0], [f, t],     [f,t], [f, t], [0,t],      [0, 2], [1,2], ...  \n   \n   \n   \n    for (let iIn5=0; iIn5 < 5; iIn5++) {\n      \n      for (let iTeam=0; iTeam < numberTeamsResult; iTeam++) {\n        \n        if (iIn5 === 0 || iIn5 === 2 || iIn5 === 4 ) {\n          listIndex.push([iTeam, iIn5])\n        }\n        \n        else if (iIn5 === 1 || iIn5 === 3) {\n          listIndex.push([ (numberTeamsResult-1)-iTeam, iIn5])\n        }\n        \n      }\n      \n    }\n    \n   \n    \n    \n    let listResult = [];\n    const added = Date.now();\n    \n    listResult.unshift({\n      added: added\n      ,listTeam: []\n    })\n  \n    \n    for (let iTeam=0; iTeam < numberTeamsResult; iTeam++) {\n      (listResult[0][\"listTeam\"]).unshift({\n        name: `team${iTeam+1}`\n        ,listPlayerBattletag: new Array(5)\n      })\n    }\n    \n    console.log(orderPlayerFinal);\n    for (let iPlayer=0; iPlayer < orderPlayerFinal.length; iPlayer++ ) {\n      \n      const indexResult = listResult.findIndex(result => (result.added === added) )\n      \n      const iTeam = listIndex[iPlayer][0];\n      const iIn5 = listIndex[iPlayer][1];\n      \n      listResult[indexResult][\"listTeam\"][iTeam]['listPlayerBattletag'][iIn5] = orderPlayerFinal[iPlayer]\n      \n    }\n    \n    let listMmrSumEachTeam =  new Array(5).fill(0);\n    \n    for (let iTeam=0; iTeam < numberTeamsResult; iTeam++) {\n      \n      for (let iIn5=0; iIn5 < 4; iIn5++) {\n        \n        const battletag = listResult[0][\"listTeam\"][iTeam]['listPlayerBattletag'][iIn5];\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\n        \n        listMmrSumEachTeam[iTeam] += objPlayer.mmr.standard[region];\n      }\n      \n      \n      let test = Array.from(Array(numberTeamsResult), (_, i) => i );  // https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\n      \n      listResult[0][\"listTeam\"][iTeam][\"mmrAverage\"] = mmrAverage;\n      \n      \n      \n      let orderTeam = test.sort( (index1, index2) => {    // mmr 높은순으로 list of battletags\n        return (objPlayer2.mmr.standard.region - objPlayer1.mmr.standard.region);\n        // ex 3333, 222, 1111\n      });\n    }\n    \n     console.log(listResult[0])\n    /*\n    let listTeam;\n    for (var i =0; i<numberTeamsResult; i++) {\n      const teamName = `team${i+1}`;\n      listTeam.push(teamName);\n    }\n    */\n   \n    /*\n    {\n      _id: String,\n      listPlayerBattletag: [String],\n      name: String,\n      group: String\n    }\n    */\n    \n    \n    /*\n    let team1 = {\n      _id: Date.now()\n      ,listPlayerBattletag: [\"mbcat#1234\", \"mbcat#1703\"]\n      ,name: \"dragon team\"\n    }\n    \n    let resultTeam = {\n      added: Date.now()\n      ,listTeam: [\n        team1\n        \n      ]\n    }\n    \n    addResult(resultTeam);\n    \n    \n    */\n  }\n  \n  \n  \n  return (\n  \n  <DivResult>\n    \n    <DivTitle> Result </DivTitle>\n    \n    <Div onClick={onClick_generateTeams}> \n      <ButtonMakingResult> \n        <IconMagic\n          \n          width={\"40px\"}\n          height={\"40px\"}\n        /> \n      </ButtonMakingResult>\n    </Div>\n  \n    \n    \n    \n  </DivResult>\n    \n  )\n}\n\n/*\n{listResult[0].listTeam.map(element=>\n      <Div> {element} </Div>\n    )}\n*/\n\n/*\n{(readyPlanTeam)? orderPlayerEntry[0][\"_id\"] : \"loading...\" }\n    {(readyPlanTeam)? orderPlayerEntry[9][\"_id\"] : \"loading...\"}\n*/\n\n/*\n\n    <DivTableEntry> \n    \n    <DivRowHeader> \n      <DivBattletagHeader>  battletag </DivBattletagHeader>\n      <Div> roles </Div>\n      <Div> mmr </Div>\n      <Div> status </Div>\n      \n       \n      <Div> </Div>\n    </DivRowHeader>\n    \n    { \n      ( listPlayerEntry ).map( (player, i) =>\n      \n        < RowPlayer \n          key={ `${player._id}_${(new Date().getTime()).toString()}` }\n          battletag={player._id} \n          mmr={player.mmr.standard.NA} \n          statusPlayer={player.status} \n        /> \n      )\n    }\n      \n    </DivTableEntry>\n    \n*/\n//<button onClick= {refetch} > Refectch </button>\n\n\n\nfunction mapStateToProps(state) { \n  return { \n    listPlayerEntry: state.planTeam.listPlayerEntry\n    ,option: state.planTeam.option\n    ,listResult: state.planTeam.listResult\n    //listPlayerEntry: [...state.planTeam.listPlayerEntry]\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\n    //,readyPlanTeam: state.ready.planTeam\n    //,loading: state.loading\n  }; \n} \n\nfunction mapDispatchToProps(dispatch) { \n  return { \n    addResult: (resultTeam) => dispatch( addResult(resultTeam) ) \n  }; \n}\n\n\n// TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);"]},"metadata":{},"sourceType":"module"}