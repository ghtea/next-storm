{"ast":null,"code":"import _regeneratorRuntime from\"/usr/projects/parallel-storm/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/usr/projects/parallel-storm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/*\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\n*/import{REPLACE_READY,REPLACE_LOADING,REPLACE_DATA,ADD_NOTIFICATION,REMOVE_NOTIFICATION}from'../store';import{replaceReady,replaceLoading,replaceData,addNotification,removeNotification}from'../store';var awaitTime=function awaitTime(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};// functions that dispatch actions which are from return fundamental action creators\nvar addRemoveNotification=function addRemoveNotification(situation,message,time){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var idNotification;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:idNotification=Date.now();dispatch(addNotification(situation,message,idNotification));_context.next=4;return awaitTime(time);case 4:dispatch(removeNotification(idNotification));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};// addRemoveNotification\nexport default addRemoveNotification;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/thunks/addRemoveNotification.js"],"names":["REPLACE_READY","REPLACE_LOADING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","replaceReady","replaceLoading","replaceData","addNotification","removeNotification","awaitTime","ms","Promise","resolve","setTimeout","addRemoveNotification","situation","message","time","dispatch","getState","idNotification","Date","now"],"mappings":"2NAAA;;;EAIA,OAAQA,aAAR,CAAuBC,eAAvB,CAAwCC,YAAxC,CAAsDC,gBAAtD,CAAwEC,mBAAxE,KAAkG,UAAlG,CACA,OAAQC,YAAR,CAAsBC,cAAtB,CAAsCC,WAAtC,CAAmDC,eAAnD,CAAoEC,kBAApE,KAA6F,UAA7F,CAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,CAAQ,CACtB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,QAAIC,CAAAA,UAAU,CAACD,OAAD,CAAUF,EAAV,CAAd,EAAnB,CAAP,CACH,CAFD,CAIA;AACA,GAAMI,CAAAA,qBAAqB,CAAI,QAAzBA,CAAAA,qBAAyB,CAACC,SAAD,CAAYC,OAAZ,CAAqBC,IAArB,iGAC7B,iBAAOC,QAAP,CAAiBC,QAAjB,qIAEQC,cAFR,CAEyBC,IAAI,CAACC,GAAL,EAFzB,CAIEJ,QAAQ,CAAEX,eAAe,CAACQ,SAAD,CAAYC,OAAZ,CAAqBI,cAArB,CAAjB,CAAR,CAJF,sBAMQX,CAAAA,SAAS,CAACQ,IAAD,CANjB,QAQEC,QAAQ,CAAEV,kBAAkB,CAACY,cAAD,CAApB,CAAR,CARF,sDAD6B,oEAA/B,CAWE;AAEF,cAAgBN,CAAAA,qBAAhB","sourcesContent":["/*\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\n*/\r\nimport {REPLACE_READY, REPLACE_LOADING, REPLACE_DATA, ADD_NOTIFICATION, REMOVE_NOTIFICATION} from '../store';\r\nimport {replaceReady, replaceLoading, replaceData, addNotification, removeNotification} from '../store'\r\n\r\n\r\nconst awaitTime = (ms) => {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n};\r\n\r\n// functions that dispatch actions which are from return fundamental action creators\r\nconst addRemoveNotification =  (situation, message, time) => \r\n  async (dispatch, getState) => {   \r\n  \r\n    const idNotification = Date.now();\r\n    \r\n    dispatch( addNotification(situation, message, idNotification) );  \r\n    \r\n    await awaitTime(time);\r\n    \r\n    dispatch( removeNotification(idNotification) );\r\n        \r\n} // addRemoveNotification\r\n    \r\nexport default  addRemoveNotification;\r\n"]},"metadata":{},"sourceType":"module"}