{"ast":null,"code":"/*\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\n*/\nimport { REPLACE_READY, REPLACE_LOADING, REPLACE_DATA, ADD_NOTIFICATION, REMOVE_NOTIFICATION } from '../store';\nimport { replaceReady, replaceLoading, replaceData, addNotification, removeNotification } from '../store';\n\nconst awaitTime = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}; // functions that dispatch actions which are from return fundamental action creators\n\n\nconst addRemoveNotification = (situation, message, time = 3000, idNotification = \"none\") => async (dispatch, getState) => {\n  let idNotificationUsing;\n\n  if (idNotification === \"none\") {\n    idNotificationUsing = Date.now().toString();\n  } else {\n    idNotificationUsing = idNotification;\n  }\n\n  dispatch(addNotification(situation, message, idNotificationUsing));\n  await awaitTime(time);\n  dispatch(removeNotification(idNotificationUsing));\n}; // addRemoveNotification\n\n\nexport default addRemoveNotification;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/thunks/addRemoveNotification.js"],"names":["REPLACE_READY","REPLACE_LOADING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","replaceReady","replaceLoading","replaceData","addNotification","removeNotification","awaitTime","ms","Promise","resolve","setTimeout","addRemoveNotification","situation","message","time","idNotification","dispatch","getState","idNotificationUsing","Date","now","toString"],"mappings":"AAAA;;;;AAIA,SAAQA,aAAR,EAAuBC,eAAvB,EAAwCC,YAAxC,EAAsDC,gBAAtD,EAAwEC,mBAAxE,QAAkG,UAAlG;AACA,SAAQC,YAAR,EAAsBC,cAAtB,EAAsCC,WAAtC,EAAmDC,eAAnD,EAAoEC,kBAApE,QAA6F,UAA7F;;AAGA,MAAMC,SAAS,GAAIC,EAAD,IAAQ;AACtB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH,CAFD,C,CAIA;;;AACA,MAAMI,qBAAqB,GAAI,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,IAAI,GAAC,IAA1B,EAAgCC,cAAc,GAAC,MAA/C,KAC7B,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAE5B,MAAIC,mBAAJ;;AACA,MAAIH,cAAc,KAAI,MAAtB,EAA8B;AAC3BG,IAAAA,mBAAmB,GAAGC,IAAI,CAACC,GAAL,GAAWC,QAAX,EAAtB;AACF,GAFD,MAGK;AAACH,IAAAA,mBAAmB,GAAGH,cAAtB;AAAqC;;AAG3CC,EAAAA,QAAQ,CAAEZ,eAAe,CAACQ,SAAD,EAAYC,OAAZ,EAAqBK,mBAArB,CAAjB,CAAR;AAEA,QAAMZ,SAAS,CAACQ,IAAD,CAAf;AAEAE,EAAAA,QAAQ,CAAEX,kBAAkB,CAACa,mBAAD,CAApB,CAAR;AAEH,CAhBD,C,CAgBE;;;AAEF,eAAgBP,qBAAhB","sourcesContent":["/*\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\n*/\r\nimport {REPLACE_READY, REPLACE_LOADING, REPLACE_DATA, ADD_NOTIFICATION, REMOVE_NOTIFICATION} from '../store';\r\nimport {replaceReady, replaceLoading, replaceData, addNotification, removeNotification} from '../store'\r\n\r\n\r\nconst awaitTime = (ms) => {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n};\r\n\r\n// functions that dispatch actions which are from return fundamental action creators\r\nconst addRemoveNotification =  (situation, message, time=3000, idNotification=\"none\") => \r\n  async (dispatch, getState) => {   \r\n    \r\n    let idNotificationUsing;\r\n    if (idNotification ===\"none\") {\r\n       idNotificationUsing = Date.now().toString();\r\n    }\r\n    else {idNotificationUsing = idNotification}\r\n    \r\n    \r\n    dispatch( addNotification(situation, message, idNotificationUsing) );  \r\n    \r\n    await awaitTime(time);\r\n    \r\n    dispatch( removeNotification(idNotificationUsing) );\r\n        \r\n} // addRemoveNotification\r\n    \r\nexport default  addRemoveNotification;\r\n"]},"metadata":{},"sourceType":"module"}