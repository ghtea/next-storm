{"ast":null,"code":"import { getTimeStamp } from '../tools/vanilla/time';\nconst REPLACE_TRIGGER = \"REPLACE_TRIGGER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nconst stateInitial = {\n  // foundamental \n  trigger: \"\",\n  ready: {\n    planTeam: false,\n    cPlayerMmr: false\n  },\n  loading: {\n    planTeam: false,\n    cPlayerMmr: false\n  },\n  working: {\n    createPlan: false,\n    putPlayerMmr: false\n  },\n  notification: [] // others\n  ,\n  authority: \"viewer\" // \"administrator\"\n  ,\n  idPlanTeam: \"\",\n  planTeam: {},\n  cPlayerMmrEntry: {},\n  themeName: \"light\"\n};\n\nconst reducer = ( // 기본값 설정\nstate = stateInitial, // 액션별로 새로운 state 반환하기\naction) => {\n  switch (action.type) {\n    case REPLACE_TRIGGER:\n      return { ...state,\n        trigger: ge\n      };\n\n    case REPLACE_DATA:\n      return { ...state,\n        [action.which]: action.data\n      };\n\n    case REPLACE_READY:\n      return { ...state,\n        ready: { ...state.ready,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_LOADING:\n      return { ...state,\n        loading: { ...state.loading,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_WORKING:\n      return { ...state,\n        working: { ...state.working,\n          [action.which]: action.true_false\n        }\n      };\n\n    case ADD_NOTIFICATION:\n      return { ...state,\n        notification: [{\n          situation: action.situation,\n          message: action.message,\n          idNotification: action.idNotification\n        }, ...state.notification]\n      };\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/reducer.js"],"names":["getTimeStamp","REPLACE_TRIGGER","REPLACE_READY","REPLACE_LOADING","REPLACE_WORKING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","stateInitial","trigger","ready","planTeam","cPlayerMmr","loading","working","createPlan","putPlayerMmr","notification","authority","idPlanTeam","cPlayerMmrEntry","themeName","reducer","state","action","type","ge","which","data","true_false","situation","message","idNotification","filter","element"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,uBAA3B;AAEA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,MAAMC,YAAY,GAAG,cAArB;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AAIA,MAAMC,YAAY,GAAG;AAEjB;AACAC,EAAAA,OAAO,EAAE,EAHQ;AAKhBC,EAAAA,KAAK,EAAG;AACPC,IAAAA,QAAQ,EAAE,KADH;AAENC,IAAAA,UAAU,EAAE;AAFN,GALQ;AAUhBC,EAAAA,OAAO,EAAG;AACTF,IAAAA,QAAQ,EAAE,KADD;AAERC,IAAAA,UAAU,EAAE;AAFJ,GAVM;AAgBhBE,EAAAA,OAAO,EAAG;AACTC,IAAAA,UAAU,EAAE,KADH;AAERC,IAAAA,YAAY,EAAE;AAFN,GAhBM;AAqBhBC,EAAAA,YAAY,EAAG,EArBC,CAwBjB;AAxBiB;AAyBhBC,EAAAA,SAAS,EAAE,QAzBK,CAyBI;AAzBJ;AA2BhBC,EAAAA,UAAU,EAAE,EA3BI;AA4BhBR,EAAAA,QAAQ,EAAE,EA5BM;AA8BhBS,EAAAA,eAAe,EAAE,EA9BD;AAgChBC,EAAAA,SAAS,EAAE;AAhCK,CAArB;;AAsCA,MAAMC,OAAO,GAAG,EAEd;AACAC,KAAK,GAAGf,YAHM,EAKd;AACAgB,MANc,KAMH;AAEX,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKxB,eAAL;AACE,aAAO,EACN,GAAGsB,KADG;AAENd,QAAAA,OAAO,EAAEiB;AAFH,OAAP;;AAKF,SAAKrB,YAAL;AACE,aAAO,EACN,GAAGkB,KADG;AAEN,SAACC,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACI;AAFjB,OAAP;;AAKF,SAAK1B,aAAL;AACE,aAAO,EACN,GAAGqB,KADG;AAENb,QAAAA,KAAK,EAAE,EACL,GAAGa,KAAK,CAACb,KADJ;AAEL,WAACc,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACK;AAFlB;AAFD,OAAP;;AAQF,SAAK1B,eAAL;AACE,aAAO,EACN,GAAGoB,KADG;AAENV,QAAAA,OAAO,EAAE,EACP,GAAGU,KAAK,CAACV,OADF;AAEP,WAACW,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACK;AAFhB;AAFH,OAAP;;AAQF,SAAKzB,eAAL;AACE,aAAO,EACN,GAAGmB,KADG;AAENT,QAAAA,OAAO,EAAE,EACP,GAAGS,KAAK,CAACT,OADF;AAEP,WAACU,MAAM,CAACG,KAAR,GAAgBH,MAAM,CAACK;AAFhB;AAFH,OAAP;;AAQF,SAAKvB,gBAAL;AACE,aAAO,EACN,GAAGiB,KADG;AAGNN,QAAAA,YAAY,EAAE,CACZ;AACEa,UAAAA,SAAS,EAAEN,MAAM,CAACM,SADpB;AAEGC,UAAAA,OAAO,EAAEP,MAAM,CAACO,OAFnB;AAGGC,UAAAA,cAAc,EAAER,MAAM,CAACQ;AAH1B,SADY,EAMV,GAAGT,KAAK,CAACN,YANC;AAHR,OAAP;;AAcF,SAAKV,mBAAL;AACE,aAAO,EACN,GAAGgB,KADG;AAENN,QAAAA,YAAY,EAAEM,KAAK,CAACN,YAAN,CAAmBgB,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACF,cAAR,KAA2BR,MAAM,CAACQ,cAAvE;AAFR,OAAP;;AAMF;AACE,aAAOT,KAAP;AAhEJ;AAkED,CA1ED;;AA6EA,eAAeD,OAAf","sourcesContent":["import {getTimeStamp} from '../tools/vanilla/time'\n\nconst REPLACE_TRIGGER = \"REPLACE_TRIGGER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\n\nconst REPLACE_DATA = \"REPLACE_DATA\";\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\n\n\nconst stateInitial = { \n    \n    // foundamental \n    trigger: \"\"\n    \n    ,ready : {\n      planTeam: false\n      ,cPlayerMmr: false\n    }\n    \n    ,loading : {\n      planTeam: false\n      ,cPlayerMmr: false\n    }\n    \n    \n    ,working : {\n      createPlan: false\n      ,putPlayerMmr: false\n    }\n    \n    ,notification : []\n    \n    \n    // others\n    ,authority: \"viewer\" // \"administrator\"\n    \n    ,idPlanTeam: \"\"\n    ,planTeam: {}\n    \n    ,cPlayerMmrEntry: {}\n    \n    ,themeName: \"light\"\n    \n  };\n\n\n\nconst reducer = (\n  \n  // 기본값 설정\n  state = stateInitial, \n  \n  // 액션별로 새로운 state 반환하기\n  action) => {\n    \n  switch (action.type) {\n    \n    case REPLACE_TRIGGER:\n      return {\n      \t...state, \n      \ttrigger: ge\n      };\n      \n    case REPLACE_DATA:\n      return {\n      \t...state, \n      \t[action.which]: action.data\n      };\n      \n    case REPLACE_READY:\n      return {\n      \t...state, \n      \tready: {\n      \t  ...state.ready,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_LOADING:\n      return {\n      \t...state, \n      \tloading: {\n      \t  ...state.loading,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_WORKING:\n      return {\n      \t...state, \n      \tworking: {\n      \t  ...state.working,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case ADD_NOTIFICATION:\n      return {\n      \t...state, \n      \t\n      \tnotification: [\n      \t  {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n      \t]\n      \t\n      };\n    \n    case REMOVE_NOTIFICATION:\n      return {\n      \t...state, \n      \tnotification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n    \n    \n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}