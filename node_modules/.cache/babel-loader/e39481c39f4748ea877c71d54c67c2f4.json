{"ast":null,"code":"const REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nconst stateInitial = {\n  // foundamental \n  ready: {\n    planTeam: false\n  },\n  loading: {\n    planTeam: false,\n    playerMmr: false\n  },\n  editingDb: {\n    PlanTeam: false,\n    PlayerMmr: false\n  },\n  notification: [],\n  // others\n  planTeam: {},\n  themeName: \"light\"\n};\n\nconst reducer = ( // 기본값 설정\nstate = stateInitial, // 액션별로 새로운 state 반환하기\naction) => {\n  switch (action.type) {\n    case REPLACE_DATA:\n      return { ...state,\n        [action.which]: action.data\n      };\n\n    case REPLACE_READY:\n      return { ...state,\n        ready: { ...state.ready,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_LOADING:\n      return { ...state,\n        loading: { ...state.loading,\n          [action.which]: action.true_false\n        }\n      };\n\n    case ADD_NOTIFICATION:\n      return { ...state,\n        notification: [{\n          situation: action.situation,\n          message: action.message,\n          idNotification: action.idNotification\n        }, ...state.notification]\n      };\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/reducer.js"],"names":["REPLACE_READY","REPLACE_LOADING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","stateInitial","ready","planTeam","loading","playerMmr","editingDb","PlanTeam","PlayerMmr","notification","themeName","reducer","state","action","type","which","data","true_false","situation","message","idNotification","filter","element"],"mappings":"AAAA,MAAMA,aAAa,GAAG,eAAtB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AAIA,MAAMC,YAAY,GAAG;AAEjB;AACAC,EAAAA,KAAK,EAAG;AACNC,IAAAA,QAAQ,EAAE;AADJ,GAHS;AAOjBC,EAAAA,OAAO,EAAG;AACRD,IAAAA,QAAQ,EAAE,KADF;AAEPE,IAAAA,SAAS,EAAE;AAFJ,GAPO;AAYjBC,EAAAA,SAAS,EAAG;AACVC,IAAAA,QAAQ,EAAE,KADA;AAETC,IAAAA,SAAS,EAAE;AAFF,GAZK;AAiBjBC,EAAAA,YAAY,EAAG,EAjBE;AAoBjB;AACAN,EAAAA,QAAQ,EAAE,EArBO;AAuBjBO,EAAAA,SAAS,EAAE;AAvBM,CAArB;;AA6BA,MAAMC,OAAO,GAAG,EAEd;AACAC,KAAK,GAAGX,YAHM,EAKd;AACAY,MANc,KAMH;AAEX,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKhB,YAAL;AACE,aAAO,EACN,GAAGc,KADG;AAEN,SAACC,MAAM,CAACE,KAAR,GAAgBF,MAAM,CAACG;AAFjB,OAAP;;AAKF,SAAKpB,aAAL;AACE,aAAO,EACN,GAAGgB,KADG;AAENV,QAAAA,KAAK,EAAE,EACL,GAAGU,KAAK,CAACV,KADJ;AAEL,WAACW,MAAM,CAACE,KAAR,GAAgBF,MAAM,CAACI;AAFlB;AAFD,OAAP;;AAQF,SAAKpB,eAAL;AACE,aAAO,EACN,GAAGe,KADG;AAENR,QAAAA,OAAO,EAAE,EACP,GAAGQ,KAAK,CAACR,OADF;AAEP,WAACS,MAAM,CAACE,KAAR,GAAgBF,MAAM,CAACI;AAFhB;AAFH,OAAP;;AAQF,SAAKlB,gBAAL;AACE,aAAO,EACN,GAAGa,KADG;AAGNH,QAAAA,YAAY,EAAE,CACZ;AACES,UAAAA,SAAS,EAAEL,MAAM,CAACK,SADpB;AAEGC,UAAAA,OAAO,EAAEN,MAAM,CAACM,OAFnB;AAGGC,UAAAA,cAAc,EAAEP,MAAM,CAACO;AAH1B,SADY,EAMV,GAAGR,KAAK,CAACH,YANC;AAHR,OAAP;;AAcF,SAAKT,mBAAL;AACE,aAAO,EACN,GAAGY,KADG;AAENH,QAAAA,YAAY,EAAEG,KAAK,CAACH,YAAN,CAAmBY,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACF,cAAR,KAA2BP,MAAM,CAACO,cAAvE;AAFR,OAAP;;AAMF;AACE,aAAOR,KAAP;AAjDJ;AAmDD,CA3DD;;AA8DA,eAAeD,OAAf","sourcesContent":["const REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\n\n\nconst stateInitial = { \n    \n    // foundamental \n    ready : {\n      planTeam: false\n    },\n    \n    loading : {\n      planTeam: false\n      ,playerMmr: false\n    }, \n    \n    editingDb : {\n      PlanTeam: false\n      ,PlayerMmr: false\n    }, \n    \n    notification : [],\n    \n    \n    // others\n    planTeam: {},\n    \n    themeName: \"light\"\n    \n  };\n\n\n\nconst reducer = (\n  \n  // 기본값 설정\n  state = stateInitial, \n  \n  // 액션별로 새로운 state 반환하기\n  action) => {\n    \n  switch (action.type) {\n    \n    case REPLACE_DATA:\n      return {\n      \t...state, \n      \t[action.which]: action.data\n      };\n      \n    case REPLACE_READY:\n      return {\n      \t...state, \n      \tready: {\n      \t  ...state.ready,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_LOADING:\n      return {\n      \t...state, \n      \tloading: {\n      \t  ...state.loading,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case ADD_NOTIFICATION:\n      return {\n      \t...state, \n      \t\n      \tnotification: [\n      \t  {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n      \t]\n      \t\n      };\n    \n    case REMOVE_NOTIFICATION:\n      return {\n      \t...state, \n      \tnotification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n    \n    \n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}