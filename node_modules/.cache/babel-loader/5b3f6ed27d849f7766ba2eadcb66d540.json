{"ast":null,"code":"var _jsxFileName = \"/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js\";\nimport dotenv from 'dotenv';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { addResult } from \"../../redux/store\";\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\";\nimport addRemoveNotification from \"../../redux/thunks/addRemoveNotification\"; // https://reacttraining.com/blog/react-router-v5-1/\n\nimport { Div, Button } from '../../styles/DefaultStyles';\nimport IconLoading from '../../svgs/IconLoading';\nimport IconConfirmed from '../../svgs/IconConfirmed';\nimport IconPending from '../../svgs/IconPending';\nimport IconInfo from '../../svgs/IconInfo';\nimport IconMagic from '../../svgs/basic/IconMagic';\nimport IconTank from '../../svgs/roles/IconTank';\nimport IconBruiser from '../../svgs/roles/IconBruiser';\nimport IconMeleeAssassin from '../../svgs/roles/IconMeleeAssassin';\nimport IconRangedAssassin from '../../svgs/roles/IconRangedAssassin';\nimport IconHealer from '../../svgs/roles/IconHealer';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { getRandomSubArray } from '../../tools/vanilla/array';\nconst DivResult = styled(Div)`\n  width: 100%;\n  max-width: 600px;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  \n  padding-bottom: 10px;\n`;\nconst DivTitle = styled(Div)`\n  margin-top: 10px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  \n  margin-bottom: 10px;\n`;\nconst DivGenerate = styled(Div)`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\nconst ButtonMagic = styled(Button)`\n  width: 120px;\n  height: 50px;\n  \n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  \n  border-radius: 10px;\n  \n  & > div {\n    \n    height: 100%;\n  }\n`;\nconst DivRosterEnter = styled(Div)`\n  \n`;\nconst DivRowPlayer = styled(Div)`\n  display: grid;\n  grid-template-columns:   100px 120px;\n  grid-template-rows: 40px;\n\n  \n  \n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\n  &:last-child {\n    border-bottom-style: none;\n  }\n`;\nconst DivBattletagHeader = styled(Div)`\n  padding-left: 10px;\n  \n  display: block;\n  text-algin: left;\n`;\nconst DivBattletag = styled(Div)`\n  justify-self: start;\n  \n  padding-left: 10px;\n  \n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-end;\n  \n  cursor: pointer;\n  \n  @media (max-width: ${props => props.theme.media.small_mid - 1}px ) {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n  }\n`;\nconst DivBattletagName = styled(Div)`\n  \n  width: auto;\n  max-width: inherit;\n  \n  display: inline;\n  text-algin: left;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\nconst DivRoles = styled(Div)`\n  \n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  \n  & > div {\n    width: auto;   // important!!!\n    height: auto;\n  }\n  \n  & > div > div {\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n  }\n`;\n\nconst RowPlayer = ({\n  battletag,\n  roles,\n  isLeader,\n  addRemoveNotification\n}) => {\n  const regexBattletag = /(#\\d*)$/;\n  const listNumberBattletag = battletag.match(regexBattletag);\n  const battletagNumber = listNumberBattletag[0];\n  const battletagName = battletag.replace(regexBattletag, \"\");\n  return /*#__PURE__*/React.createElement(DivRowPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: battletag,\n    onCopy: () => {\n      addRemoveNotification(\"success\", `'${battletag}' has been copied`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DivBattletag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DivBattletagName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \" \", battletagName, \" \"))), /*#__PURE__*/React.createElement(DivRoles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \" \", roles.includes(\"Tank\") ? /*#__PURE__*/React.createElement(IconTank, {\n    width: \"20px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 42\n    }\n  }) : /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 88\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \" \", roles.includes(\"Bruiser\") ? /*#__PURE__*/React.createElement(IconBruiser, {\n    width: \"20px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 45\n    }\n  }) : /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 94\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \" \", roles.includes(\"Melee Assassin\") ? /*#__PURE__*/React.createElement(IconMeleeAssassin, {\n    width: \"18px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 52\n    }\n  }) : /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 107\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \" \", roles.includes(\"Ranged Assassin\") ? /*#__PURE__*/React.createElement(IconRangedAssassin, {\n    width: \"20px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 53\n    }\n  }) : /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 109\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, \" \", roles.includes(\"Healer\") ? /*#__PURE__*/React.createElement(IconHealer, {\n    width: \"15px\",\n    height: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 44\n    }\n  }) : /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 92\n    }\n  }), \" \")));\n};\n\nconst Result = ({\n  option,\n  listPlayerEntry,\n  addRemoveNotification\n}) => {\n  const [listTeams, setListTeams] = useState([]);\n  const region = option.region;\n  const numberTeamsPlanned = option.numberTeams;\n  const listPlayerBattletag = Object.keys(listPlayerEntry).map(element => listPlayerEntry[element]._id); // list of battletags, this can be modified by .sort\n  // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\n\n  const onClick_generateTeams = event => {\n    let numberTeamsResult;\n    let listBattletagPlaying = [];\n    let listBattletagPlayingSorted = []; //  후반에 쓰게될 정렬 함수\n\n    const sortListBattletagByMmrHigherFirst = (battletag1, battletag2) => {\n      // mmr 높은순으로 list of battletags\n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag1);\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag2);\n      return objPlayer2.mmr.standard[region] - objPlayer1.mmr.standard[region]; // ex 3333, 222, 1111\n    }; // A. 먼저 leader, confirmed  인 것들 고려해서 총 플레이 인원 뽑기\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\n    // C. 정렬된 플레이러들을, (example of 3 teams)\n    // team:  0 1 2    2 1 0   0 1 2    2 1 0  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\n    // A-1\n\n\n    const listBattletagConfirmed = listPlayerBattletag.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.status === \"confirmed\";\n    });\n    const listBattletagConfirmedLeader = listBattletagConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    });\n    const listBattletagConfirmedNonLeader = listBattletagConfirmed.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\");\n    }); //  먼저 설정된 팀 개수 검토\n    // numberTeamsPlanned: 0  means auto \n\n    if (numberTeamsPlanned === 0) {\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\n    } else if (listBattletagConfirmed.length < numberTeamsPlanned * 5) {\n      addRemoveNotification(\"error\", \"the number of team which you have set was adjusted\");\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\n    } else {\n      numberTeamsResult = numberTeamsPlanned;\n    } // A-2\n\n\n    if (numberTeamsResult === 0) {\n      addRemoveNotification(\"error\", \"need at least 5 confirmed players\");\n    } else if (listBattletagConfirmedLeader.length >= numberTeamsResult * 5) {\n      listBattletagPlaying = getRandomSubArray(listBattletagConfirmedLeader, numberTeamsPlanned * 5);\n    } else {\n      const numberConfirmedLeader = listBattletagConfirmedLeader.length;\n      const listBattletagConfirmedNonLeaderPlaying = getRandomSubArray(listBattletagConfirmedNonLeader, numberTeamsResult * 5 - numberConfirmedLeader);\n      listBattletagPlaying = [...listBattletagConfirmedLeader, ...listBattletagConfirmedNonLeaderPlaying];\n    } //console.log(\"listBattletagPlaying\")\n    //console.log(listBattletagPlaying)\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\n\n\n    let listBattletagPlayingLeader = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return objPlayer.tags.includes(\"leader\");\n    });\n    listBattletagPlayingLeader = listBattletagPlayingLeader.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2));\n    let listBattletagPlayingLessRoles = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !objPlayer.tags.includes(\"leader\") && objPlayer.roles.length <= 2;\n    });\n    listBattletagPlayingLessRoles = listBattletagPlayingLessRoles.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2));\n    let listBattletagPlayingTheOthers = listBattletagPlaying.filter(battletag => {\n      const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag);\n      return !(objPlayer.roles.length <= 2) && !objPlayer.tags.includes(\"leader\");\n    });\n    listBattletagPlayingTheOthers = listBattletagPlayingTheOthers.sort((battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2)); // finally\n\n    listBattletagPlayingSorted = [...listBattletagPlayingLeader, ...listBattletagPlayingLessRoles, ...listBattletagPlayingTheOthers];\n    console.log(`listBattletagPlayingSorted`);\n    console.log(listBattletagPlayingSorted); // C. 정렬된 플레이러들을, (example of 3 teams)\n    // team:  0 1 2    2 1 0   0 1 2    2 1 0  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\n    //https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\n\n    let listIndexTeam = [];\n    const listIncreasing = Array.from(Array(numberTeamsResult), (_, i) => i); // => [0, 1, 2, 3, 4, 5, ...]\n\n    const listDecreasing = Array.from(Array(numberTeamsResult), (_, i) => numberTeamsResult - 1 - i); // => [5, 4, 3, ... ]\n\n    listIndexTeam = [...listIncreasing, ...listDecreasing, ...listIncreasing, ...listDecreasing]; //console.log('listIndexTeam')\n    //console.log(listIndexTeam)\n\n    let listTeamsTemp = new Array(numberTeamsResult);\n\n    for (let i = 0; i < numberTeamsResult; i++) {\n      listTeamsTemp[i] = {};\n      listTeamsTemp[i]['listPlayerBattletag'] = [];\n    }\n\n    for (let iBattletag = 0; iBattletag < listBattletagPlayingSorted.length - numberTeamsResult; iBattletag++) {\n      const cBattletag = listBattletagPlayingSorted[iBattletag];\n      const indexTeamToPush = listIndexTeam[iBattletag];\n      listTeamsTemp[indexTeamToPush]['listPlayerBattletag'].push(cBattletag);\n    }\n\n    console.log(\"listTeamsTemp\");\n    console.log(listTeamsTemp);\n    let listTeamSumOfMmr = Array.from(Array(numberTeamsResult), (_, i) => 0); // numberTeamsResult 개의  0 으로 이루어진 리스트\n\n    let listTeamAverageOfMmr = Array.from(Array(numberTeamsResult), (_, i) => 0); // numberTeamsResult 개의  0 으로 이루어진 리스트\n    //console.log(listTeamSumOfMmr);\n\n    for (let iTeam = 0; iTeam < numberTeamsResult; iTeam++) {\n      for (let iMember = 0; iMember < 4; iMember++) {\n        const cBattletag = listTeamsTemp[iTeam]['listPlayerBattletag'][iMember];\n        const cObjPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === cBattletag);\n        listTeamSumOfMmr[iTeam] += cObjPlayer.mmr.standard[region];\n      }\n    }\n\n    console.log(\"listTeamSumOfMmr\");\n    console.log(listTeamSumOfMmr);\n    let listIndexTeamWhichNeedHighMmrPlayer = [];\n    const listTool = Array.from(Array(numberTeamsResult), (_, i) => i); // [0, 1, 2, ...]\n\n    listIndexTeamWhichNeedHighMmrPlayer = listTool.sort((index1, index2) => {\n      const SumOfMmmr1 = listTeamSumOfMmr[index1];\n      const SumOfMmmr2 = listTeamSumOfMmr[index2];\n      return SumOfMmmr1 - SumOfMmmr2; // 작은게 앞에 나오게 된다.\n    }); // 마지막 인원들 넣기\n\n    for (let jTeam = 0; jTeam < numberTeamsResult; jTeam++) {\n      const cIndexTeam = listIndexTeamWhichNeedHighMmrPlayer[jTeam];\n      const cBattletag = listBattletagPlayingSorted[numberTeamsResult * 4 + jTeam];\n      const cObjPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === cBattletag);\n      listTeamsTemp[cIndexTeam]['listPlayerBattletag'].push(cBattletag);\n      listTeamSumOfMmr[cIndexTeam] += cObjPlayer.mmr.standard[region];\n    } // calculate mmr average\n\n\n    for (let iTeam = 0; iTeam < numberTeamsResult; iTeam++) {\n      listTeamAverageOfMmr[iTeam] = listTeamSumOfMmr[iTeam] / 5;\n    }\n\n    console.log(listTeamsTemp);\n    console.log(\"final average of mmr each team: \");\n    console.log(listTeamAverageOfMmr);\n    setListTeams(listTeamsTemp);\n  };\n\n  return /*#__PURE__*/React.createElement(DivResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(DivTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 5\n    }\n  }, \" Result \"), /*#__PURE__*/React.createElement(DivGenerate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonMagic, {\n    onClick: onClick_generateTeams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }\n  }, \" Generate Teams \"), /*#__PURE__*/React.createElement(IconMagic, {\n    width: \"40px\",\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(DivRosterEnter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 5\n    }\n  }, listTeams.length ? listTeams.map((team, index) => /*#__PURE__*/React.createElement(Div, {\n    key: `team${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 11\n    }\n  }, \" \", team.listPlayerBattletag[0], \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 11\n    }\n  }, \" \", team.listPlayerBattletag[1], \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 11\n    }\n  }, \" \", team.listPlayerBattletag[2], \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, \" \", team.listPlayerBattletag[3], \" \"), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 11\n    }\n  }, \" \", team.listPlayerBattletag[4], \" \"))) : \"no result yet\"));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    option: state.planTeam.option,\n    listPlayerEntry: state.planTeam.listPlayerEntry //listPlayerEntry: [...state.planTeam.listPlayerEntry]\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\n    //,readyPlanTeam: state.ready.planTeam\n    //,loading: state.loading\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addResult: resultTeam => dispatch(addResult(resultTeam)),\n    addRemoveNotification: (situation, message, time) => dispatch(addRemoveNotification(situation, message, time))\n  };\n} // TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/components/TeamGenerator/Result.js"],"names":["dotenv","React","useState","useEffect","styled","axios","NavLink","useParams","connect","addResult","readPlanTeam","addRemoveNotification","Div","Button","IconLoading","IconConfirmed","IconPending","IconInfo","IconMagic","IconTank","IconBruiser","IconMeleeAssassin","IconRangedAssassin","IconHealer","CopyToClipboard","getRandomSubArray","DivResult","DivTitle","DivGenerate","ButtonMagic","DivRosterEnter","DivRowPlayer","props","theme","color_very_weak","DivBattletagHeader","DivBattletag","media","small_mid","DivBattletagName","DivRoles","RowPlayer","battletag","roles","isLeader","regexBattletag","listNumberBattletag","match","battletagNumber","battletagName","replace","includes","Result","option","listPlayerEntry","listTeams","setListTeams","region","numberTeamsPlanned","numberTeams","listPlayerBattletag","Object","keys","map","element","_id","onClick_generateTeams","event","numberTeamsResult","listBattletagPlaying","listBattletagPlayingSorted","sortListBattletagByMmrHigherFirst","battletag1","battletag2","objPlayer1","find","objPlayer","objPlayer2","mmr","standard","listBattletagConfirmed","filter","status","listBattletagConfirmedLeader","tags","listBattletagConfirmedNonLeader","Math","floor","length","numberConfirmedLeader","listBattletagConfirmedNonLeaderPlaying","listBattletagPlayingLeader","sort","listBattletagPlayingLessRoles","listBattletagPlayingTheOthers","console","log","listIndexTeam","listIncreasing","Array","from","_","i","listDecreasing","listTeamsTemp","iBattletag","cBattletag","indexTeamToPush","push","listTeamSumOfMmr","listTeamAverageOfMmr","iTeam","iMember","cObjPlayer","listIndexTeamWhichNeedHighMmrPlayer","listTool","index1","index2","SumOfMmmr1","SumOfMmmr2","jTeam","cIndexTeam","team","index","mapStateToProps","state","planTeam","mapDispatchToProps","dispatch","resultTeam","situation","message","time"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\r\nimport React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {addResult} from \"../../redux/store\";\r\nimport readPlanTeam from \"../../redux/thunks/readPlanTeam\";\r\nimport addRemoveNotification from \"../../redux/thunks/addRemoveNotification\";\r\n// https://reacttraining.com/blog/react-router-v5-1/\r\n\r\nimport {Div, Button} from '../../styles/DefaultStyles';\r\n\r\nimport IconLoading from '../../svgs/IconLoading'\r\n\r\nimport IconConfirmed from '../../svgs/IconConfirmed'\r\nimport IconPending from '../../svgs/IconPending'\r\nimport IconInfo from '../../svgs/IconInfo'\r\nimport IconMagic from  '../../svgs/basic/IconMagic'\r\n\r\nimport IconTank from '../../svgs/roles/IconTank'\r\nimport IconBruiser from '../../svgs/roles/IconBruiser'\r\nimport IconMeleeAssassin from '../../svgs/roles/IconMeleeAssassin'\r\nimport IconRangedAssassin from '../../svgs/roles/IconRangedAssassin'\r\nimport IconHealer from '../../svgs/roles/IconHealer'\r\n\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\nimport {getRandomSubArray} from  '../../tools/vanilla/array'\r\n\r\n\r\nconst DivResult = styled(Div)`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  \r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst DivTitle = styled(Div)`\r\n  margin-top: 10px;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  \r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst DivGenerate = styled(Div)`\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst ButtonMagic = styled(Button)`\r\n  width: 120px;\r\n  height: 50px;\r\n  \r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n  border-radius: 10px;\r\n  \r\n  & > div {\r\n    \r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst DivRosterEnter = styled(Div)`\r\n  \r\n`\r\n\r\n\r\nconst DivRowPlayer = styled(Div)`\r\n  display: grid;\r\n  grid-template-columns:   100px 120px;\r\n  grid-template-rows: 40px;\r\n\r\n  \r\n  \r\n  border-bottom: 1px solid ${props => props.theme.color_very_weak};\r\n  &:last-child {\r\n    border-bottom-style: none;\r\n  }\r\n`\r\n\r\nconst DivBattletagHeader = styled(Div)`\r\n  padding-left: 10px;\r\n  \r\n  display: block;\r\n  text-algin: left;\r\n`\r\n\r\nconst DivBattletag = styled(Div)`\r\n  justify-self: start;\r\n  \r\n  padding-left: 10px;\r\n  \r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-items: flex-end;\r\n  \r\n  cursor: pointer;\r\n  \r\n  @media (max-width: ${props => (props.theme.media.small_mid -1) }px ) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n  }\r\n`\r\n\r\nconst DivBattletagName = styled(Div)`\r\n  \r\n  width: auto;\r\n  max-width: inherit;\r\n  \r\n  display: inline;\r\n  text-algin: left;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst DivRoles = styled(Div)`\r\n  \r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  \r\n  & > div {\r\n    width: auto;   // important!!!\r\n    height: auto;\r\n  }\r\n  \r\n  & > div > div {\r\n    width: 20px;\r\n    height: 20px;\r\n    margin: 2px;\r\n  }\r\n`\r\n\r\nconst RowPlayer = ({\r\n   battletag, roles, isLeader\r\n  , addRemoveNotification\r\n}) => {\r\n  \r\n  \r\n  const regexBattletag = /(#\\d*)$/;\r\n  const listNumberBattletag = battletag.match(regexBattletag);\r\n  \r\n  const battletagNumber = listNumberBattletag[0];\r\n  const battletagName = battletag.replace(regexBattletag, \"\")\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    \r\n    <DivRowPlayer >\r\n      \r\n      <CopyToClipboard \r\n        text={battletag}\r\n        onCopy={ () => { addRemoveNotification(\"success\", `'${battletag}' has been copied`) } } >\r\n        \r\n        <DivBattletag> \r\n          <DivBattletagName> {battletagName} </DivBattletagName>\r\n        </DivBattletag>\r\n        \r\n      </CopyToClipboard>\r\n      \r\n      <DivRoles> \r\n        <Div> {(roles.includes(\"Tank\"))? <IconTank width={\"20px\"} height={\"20px\"} /> : <Div></Div>} </Div>\r\n        <Div> {(roles.includes(\"Bruiser\"))? <IconBruiser width={\"20px\"} height={\"20px\"} /> : <Div></Div>} </Div>\r\n        <Div> {(roles.includes(\"Melee Assassin\"))? <IconMeleeAssassin width={\"18px\"} height={\"20px\"} /> : <Div></Div>} </Div>\r\n        <Div> {(roles.includes(\"Ranged Assassin\"))? <IconRangedAssassin width={\"20px\"} height={\"20px\"} /> : <Div></Div>} </Div>\r\n        <Div> {(roles.includes(\"Healer\"))? <IconHealer width={\"15px\"} height={\"20px\"} /> : <Div></Div>} </Div>\r\n      </DivRoles>\r\n         \r\n    </DivRowPlayer>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Result = ({\r\n  option, listPlayerEntry\r\n  , addRemoveNotification\r\n}) => {\r\n  \r\n  const [listTeams, setListTeams] = useState([]);\r\n  \r\n  const region = option.region;\r\n  const numberTeamsPlanned = option.numberTeams;\r\n  const listPlayerBattletag = (Object.keys(listPlayerEntry)).map(element=>listPlayerEntry[element]._id); // list of battletags, this can be modified by .sort\r\n  \r\n\r\n  // 1. confirmed - 2. leader - 3. less roles player(2, 1) - 4. rest\r\n  const onClick_generateTeams = (event) => {\r\n    \r\n    let numberTeamsResult;\r\n    let listBattletagPlaying = [];\r\n    let listBattletagPlayingSorted = [];\r\n    \r\n    //  후반에 쓰게될 정렬 함수\r\n    const sortListBattletagByMmrHigherFirst = (battletag1, battletag2) => {    // mmr 높은순으로 list of battletags\r\n      \r\n      const objPlayer1 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag1)\r\n      const objPlayer2 = listPlayerEntry.find(objPlayer => objPlayer._id === battletag2)\r\n      \r\n      return (objPlayer2.mmr.standard[region] - objPlayer1.mmr.standard[region]);\r\n      // ex 3333, 222, 1111\r\n    }\r\n    \r\n    \r\n    // A. 먼저 leader, confirmed  인 것들 고려해서 총 플레이 인원 뽑기\r\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\r\n    // C. 정렬된 플레이러들을, (example of 3 teams)\r\n    // team:  0 1 2    2 1 0   0 1 2    2 1 0  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\r\n    \r\n    // A-1\r\n    const listBattletagConfirmed = listPlayerBattletag.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( objPlayer.status === \"confirmed\" )\r\n      }\r\n    )\r\n    \r\n    const listBattletagConfirmedLeader = listBattletagConfirmed.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return (objPlayer.tags.includes(\"leader\"))\r\n      }\r\n    )\r\n    \r\n    const listBattletagConfirmedNonLeader = listBattletagConfirmed.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( !(objPlayer.tags.includes(\"leader\")) )\r\n      }\r\n    )\r\n    \r\n    \r\n    //  먼저 설정된 팀 개수 검토\r\n    \r\n    // numberTeamsPlanned: 0  means auto \r\n    if ( numberTeamsPlanned === 0 ) {\r\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\r\n    }\r\n    else if (listBattletagConfirmed.length < (numberTeamsPlanned * 5)) {\r\n      addRemoveNotification(\"error\", \"the number of team which you have set was adjusted\");\r\n      numberTeamsResult = Math.floor(listBattletagConfirmed.length / 5);\r\n    }\r\n    else {numberTeamsResult = numberTeamsPlanned}\r\n    \r\n    \r\n    // A-2\r\n    if (numberTeamsResult === 0) {\r\n      addRemoveNotification(\"error\", \"need at least 5 confirmed players\");\r\n    }\r\n    else if (listBattletagConfirmedLeader.length >= numberTeamsResult * 5 ) {\r\n      listBattletagPlaying = getRandomSubArray(listBattletagConfirmedLeader, numberTeamsPlanned * 5 );\r\n    }\r\n    else {\r\n      const numberConfirmedLeader = listBattletagConfirmedLeader.length;\r\n      const listBattletagConfirmedNonLeaderPlaying = getRandomSubArray(listBattletagConfirmedNonLeader, (numberTeamsResult * 5 - numberConfirmedLeader) );\r\n      listBattletagPlaying = [...listBattletagConfirmedLeader, ...listBattletagConfirmedNonLeaderPlaying];\r\n    }\r\n    \r\n    \r\n    \r\n    //console.log(\"listBattletagPlaying\")\r\n    //console.log(listBattletagPlaying)\r\n    \r\n    // B. 그다음 총 리스트를 leader, 플레이 역할 적은 플레이어, 그외 로 세 개로 나누고, 각각의 3개의 리스트 안에서 mmr 높은 순으로 정렬하고 합치기\r\n    let listBattletagPlayingLeader = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( objPlayer.tags.includes(\"leader\") )\r\n      }\r\n    )\r\n    listBattletagPlayingLeader = listBattletagPlayingLeader.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n    \r\n    \r\n    let listBattletagPlayingLessRoles = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return ( !(objPlayer.tags.includes(\"leader\")) && objPlayer.roles.length <= 2 )\r\n      }\r\n    )\r\n    listBattletagPlayingLessRoles = listBattletagPlayingLessRoles.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n\r\n   \r\n   let listBattletagPlayingTheOthers = listBattletagPlaying.filter(\r\n      battletag => {\r\n        const objPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === battletag)\r\n        return (  !(objPlayer.roles.length <= 2) && !(objPlayer.tags.includes(\"leader\"))   )\r\n      }\r\n    )\r\n    listBattletagPlayingTheOthers = listBattletagPlayingTheOthers.sort( (battletag1, battletag2) => sortListBattletagByMmrHigherFirst(battletag1, battletag2) );\r\n    \r\n    \r\n    // finally\r\n    listBattletagPlayingSorted = [...listBattletagPlayingLeader, ...listBattletagPlayingLessRoles, ...listBattletagPlayingTheOthers];\r\n    \r\n   console.log(`listBattletagPlayingSorted`) \r\n    console.log(listBattletagPlayingSorted) \r\n    \r\n    \r\n    \r\n   // C. 정렬된 플레이러들을, (example of 3 teams)\r\n   // team:  0 1 2    2 1 0   0 1 2    2 1 0  마지막 주기는  mmr 총합 낮은 팀에 mmr 높은 사람 넣는 식으로!\r\n   \r\n   \r\n   //https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\r\n   \r\n   \r\n    let listIndexTeam = [];\r\n   \r\n    const listIncreasing = Array.from(Array(numberTeamsResult), (_, i) => i)  // => [0, 1, 2, 3, 4, 5, ...]\r\n    const listDecreasing = Array.from(Array(numberTeamsResult), (_, i) => ( (numberTeamsResult - 1) - i) ) // => [5, 4, 3, ... ]\r\n\r\n    \r\n    listIndexTeam = [...listIncreasing, ...listDecreasing, ...listIncreasing, ...listDecreasing];\r\n    //console.log('listIndexTeam')\r\n    //console.log(listIndexTeam)\r\n    \r\n    \r\n    \r\n    let listTeamsTemp = new Array(numberTeamsResult);\r\n    for ( let i  =0; i  < numberTeamsResult; i++) {\r\n      listTeamsTemp[i] = {};\r\n      listTeamsTemp[i]['listPlayerBattletag'] = [];\r\n    }\r\n    \r\n    \r\n    \r\n    for ( let iBattletag =0; iBattletag < (listBattletagPlayingSorted.length - numberTeamsResult) ; iBattletag++) {\r\n      \r\n      const cBattletag = listBattletagPlayingSorted[iBattletag];\r\n      const indexTeamToPush = listIndexTeam[iBattletag];\r\n      \r\n      listTeamsTemp[ indexTeamToPush ]['listPlayerBattletag'].push( cBattletag );\r\n    }\r\n    \r\n    console.log(\"listTeamsTemp\")\r\n    console.log(listTeamsTemp)\r\n    \r\n    \r\n    let listTeamSumOfMmr =  Array.from(Array(numberTeamsResult), (_, i) => 0);  // numberTeamsResult 개의  0 으로 이루어진 리스트\r\n    let listTeamAverageOfMmr =  Array.from(Array(numberTeamsResult), (_, i) => 0);  // numberTeamsResult 개의  0 으로 이루어진 리스트\r\n    //console.log(listTeamSumOfMmr);\r\n    \r\n    for ( let iTeam =0; iTeam < numberTeamsResult; iTeam++) {\r\n      \r\n      for ( let iMember =0; iMember < 4; iMember++) {\r\n        \r\n        const cBattletag = listTeamsTemp[iTeam]['listPlayerBattletag'][iMember];\r\n        const cObjPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === cBattletag);\r\n        \r\n        listTeamSumOfMmr[iTeam] += cObjPlayer.mmr.standard[region];\r\n      }\r\n      \r\n    }\r\n    \r\n    console.log(\"listTeamSumOfMmr\")\r\n    console.log(listTeamSumOfMmr)\r\n    \r\n    let listIndexTeamWhichNeedHighMmrPlayer = [];\r\n    const listTool = Array.from(Array(numberTeamsResult), (_, i) => i); // [0, 1, 2, ...]\r\n    listIndexTeamWhichNeedHighMmrPlayer = listTool.sort( (index1, index2) => {\r\n      \r\n      const SumOfMmmr1 = listTeamSumOfMmr[index1];\r\n      const SumOfMmmr2 = listTeamSumOfMmr[index2];\r\n      \r\n      return (SumOfMmmr1 - SumOfMmmr2);  // 작은게 앞에 나오게 된다.\r\n    } )\r\n    \r\n    \r\n    // 마지막 인원들 넣기\r\n    for ( let jTeam =0; jTeam < numberTeamsResult; jTeam++) {\r\n      \r\n      const cIndexTeam = listIndexTeamWhichNeedHighMmrPlayer[jTeam];\r\n      const cBattletag = listBattletagPlayingSorted[numberTeamsResult * 4 + jTeam];\r\n      const cObjPlayer = listPlayerEntry.find(objPlayer => objPlayer._id === cBattletag);\r\n\r\n      (listTeamsTemp[cIndexTeam]['listPlayerBattletag']).push(cBattletag);\r\n      \r\n      listTeamSumOfMmr[cIndexTeam] += cObjPlayer.mmr.standard[region];\r\n    }\r\n    \r\n    // calculate mmr average\r\n    for ( let iTeam =0; iTeam < numberTeamsResult; iTeam++) {\r\n      \r\n      listTeamAverageOfMmr[iTeam] = listTeamSumOfMmr[iTeam] / 5\r\n      \r\n    }\r\n    \r\n    console.log(listTeamsTemp);\r\n    \r\n    console.log(\"final average of mmr each team: \")\r\n    console.log(listTeamAverageOfMmr)\r\n\r\n    setListTeams(listTeamsTemp);\r\n  }\r\n  \r\n  \r\n  return (\r\n  \r\n  <DivResult>\r\n    \r\n    <DivTitle> Result </DivTitle>\r\n    \r\n    \r\n    <DivGenerate>\r\n    \r\n      <ButtonMagic onClick={onClick_generateTeams}>\r\n        <Div> Generate Teams </Div>\r\n        <IconMagic width={\"40px\"} height={\"40px\"} />   \r\n      </ButtonMagic>\r\n    \r\n    </DivGenerate>\r\n  \r\n    <DivRosterEnter>\r\n     {(listTeams.length)?\r\n      \r\n      listTeams.map( (team, index)=>\r\n        <Div key={`team${index}`} > \r\n          <Div> {team.listPlayerBattletag[0]} </Div>\r\n          <Div> {team.listPlayerBattletag[1]} </Div>\r\n          <Div> {team.listPlayerBattletag[2]} </Div>\r\n          <Div> {team.listPlayerBattletag[3]} </Div>\r\n          <Div> {team.listPlayerBattletag[4]} </Div>\r\n        </Div>\r\n      )\r\n     \r\n     : \"no result yet\"}\r\n    </DivRosterEnter>\r\n    \r\n  </DivResult>\r\n    \r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state) { \r\n  return { \r\n    option: state.planTeam.option\r\n    ,listPlayerEntry: state.planTeam.listPlayerEntry\r\n    //listPlayerEntry: [...state.planTeam.listPlayerEntry]\r\n    //,workingAddPlayerToListPlayerEntry: state.working.addPlayerToListPlayerEntry\r\n    //,readyPlanTeam: state.ready.planTeam\r\n    //,loading: state.loading\r\n  }; \r\n} \r\n\r\nfunction mapDispatchToProps(dispatch) { \r\n  return { \r\n    addResult: (resultTeam) => dispatch( addResult(resultTeam) ) \r\n    ,  addRemoveNotification: (situation, message, time) => dispatch( addRemoveNotification(situation, message, time) )\r\n  }; \r\n}\r\n\r\n\r\n// TableEntry 컴포넌트에서 redux의 state, dispatch 를 일부분 골라서 이용가능하게 된다\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);"]},"metadata":{},"sourceType":"module"}