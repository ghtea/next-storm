{"ast":null,"code":"import { getTimeStamp } from '../tools/vanilla/time';\nimport { toggleArrayElement } from '../tools/vanilla/array'; //const REPLACE_RERENDER = \"REPLACE_RERENDER\";\n\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\nconst REPLACE_DATA = \"REPLACE_DATA\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nconst ADD_RESULT = \"ADD_RESULT\";\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\nconst REPLACE_PLAYER_STATUS = \"REPLACE_PLAYER_STATUS\";\nconst REPLACE_REGION = \"REPLACE_REGION\";\nconst REPLACE_NUMBER = \"REPLACE_NUMBER\";\nconst stateInitial = {\n  // foundamental \n\n  /*\n  rerender: {\n    planTeam: \"\"\n  }*/\n  ready: {\n    planTeam: false\n  },\n  loading: {\n    planTeam: false\n  },\n  working: {\n    createPlan: false,\n    addPlayer: false,\n    putPlayerMmr: false,\n    addPlayerToListPlayerEntry: false,\n    addPlayerMmrStandardToListPlayerEntry: false\n  },\n  notification: [] // others\n  ,\n  authority: \"unknown\" // \"administrator\" \"viewer\"\n  ,\n  idPlanTeam: \"\",\n  planTeam: {\n    _id: \"_id\",\n    password: \"password\",\n    title: \"title\",\n    listResult: [],\n    listPlayerEntry: [{\n      _id: \"test\",\n      tags: []\n    }],\n    option: {}\n  },\n  themeName: \"light\"\n};\n\nconst reducer = ( // 기본값 설정\nstate = stateInitial, // 액션별로 새로운 state 반환하기\naction) => {\n  switch (action.type) {\n    /*\n    case REPLACE_RERENDER:\n      return {\n      \t...state, \n      \trerender: {\n      \t  ...state.rerender\n      \t  ,[action.which]: getTimeStamp()\n      \t}\n      };\n      */\n    case REPLACE_DATA:\n      if (!!action.data && action.data.constructor === Array) {\n        return { ...state,\n          [action.which]: [...action.data]\n        };\n      } else if (!!action.data && action.data.constructor === Object) {\n        return { ...state,\n          [action.which]: { ...action.data\n          }\n        };\n      } else {\n        return { ...state,\n          [action.which]: action.data\n        };\n      }\n\n    case REPLACE_READY:\n      return { ...state,\n        ready: { ...state.ready,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_LOADING:\n      return { ...state,\n        loading: { ...state.loading,\n          [action.which]: action.true_false\n        }\n      };\n\n    case REPLACE_WORKING:\n      return { ...state,\n        working: { ...state.working,\n          [action.which]: action.true_false\n        }\n      };\n\n    case ADD_NOTIFICATION:\n      const listIdNotification = state.notification.map(element => element.idNotification); // list of idNotification\n\n      if (!listIdNotification.includes(action.idNotification)) {\n        // 기존에 동일한 아이디의 알림이 없어야 추가\n        return { ...state,\n          notification: [{\n            situation: action.situation,\n            message: action.message,\n            idNotification: action.idNotification\n          }, ...state.notification]\n        };\n      } else {\n        return state;\n      }\n\n    case REMOVE_NOTIFICATION:\n      return { ...state,\n        notification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n\n    case ADD_RESULT:\n      // 같은 id의 result 가 이미 존재하는지 여부에 따라 행동 다르게!\n      let listResultTemp = [...state.planTeam.listResult];\n      const listIdResultBefore = state.planTeam.listResult.map(element => element._id);\n      const indexIfExistAlready = listIdResultBefore.indexOf(action.result._id);\n\n      if (indexIfExistAlready !== -1) {\n        // if result same _id existed\n        listResultTemp = state.planTeam.listResult.filter((element, index) => index !== indexIfExistAlready);\n      } else {\n        listResultTemp = listResultTemp.unshift(action.result);\n      }\n\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          listResult: listResultTemp\n        }\n      };\n    // return\n\n    case REPLACE_REGION:\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          option: { ...state.planTeam.option,\n            region: action.region\n          }\n        }\n      };\n\n    case REPLACE_NUMBER:\n      let whichNumber;\n      let valueCurrent;\n\n      if (action.which === \"team\") {\n        whichNumber = \"numberTeams\";\n        valueCurrent = action.pairNumber[0];\n      } else if (action.which === \"group\") {\n        whichNumber = \"numberGroups\";\n        valueCurrent = action.pairNumber[1];\n      }\n\n      if (action.how === \"center\") {\n        return { ...state,\n          planTeam: { ...state.planTeam,\n            option: { ...state.planTeam.option,\n              [whichNumber]: 0\n            }\n          }\n        };\n      } else if (action.how === \"plus\") {\n        return { ...state,\n          planTeam: { ...state.planTeam,\n            option: { ...state.planTeam.option,\n              [whichNumber]: state.planTeam.option[whichNumber] + 1\n            }\n          }\n        };\n      } else if (action.how === \"minus\" && !(valueCurrent == 0)) {\n        return { ...state,\n          planTeam: { ...state.planTeam,\n            option: { ...state.planTeam.option,\n              [whichNumber]: state.planTeam.option[whichNumber] - 1\n            }\n          }\n        };\n      } else if (action.how === \"minus\" && valueCurrent == 0) {\n        return { ...state,\n          planTeam: { ...state.planTeam,\n            option: { ...state.planTeam.option,\n              [whichNumber]: 0\n            }\n          }\n        };\n      }\n\n    case REPLACE_PLAYER_TAGS:\n      const index1 = state.planTeam.listPlayerEntry.findIndex(objPlayer => objPlayer._id === action.battletag);\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          listPlayerEntry: state.planTeam.listPlayerEntry.map(objPlayer => objPlayer._id === action.battletag ? { ...objPlayer,\n            tags: toggleArrayElement(state.planTeam.listPlayerEntry[index1][\"tags\"], action.tag, action.true_false)\n          } : objPlayer)\n        }\n      };\n\n    case REPLACE_PLAYER_STATUS:\n      return { ...state,\n        planTeam: { ...state.planTeam,\n          listPlayerEntry: state.planTeam.listPlayerEntry.map(objPlayer => objPlayer._id === action.battletag ? { ...objPlayer,\n            status: action.status\n          } : objPlayer)\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/usr/projects/parallel-storm/src/redux/reducer.js"],"names":["getTimeStamp","toggleArrayElement","REPLACE_READY","REPLACE_LOADING","REPLACE_WORKING","REPLACE_DATA","ADD_NOTIFICATION","REMOVE_NOTIFICATION","ADD_RESULT","REPLACE_PLAYER_TAGS","REPLACE_PLAYER_STATUS","REPLACE_REGION","REPLACE_NUMBER","stateInitial","ready","planTeam","loading","working","createPlan","addPlayer","putPlayerMmr","addPlayerToListPlayerEntry","addPlayerMmrStandardToListPlayerEntry","notification","authority","idPlanTeam","_id","password","title","listResult","listPlayerEntry","tags","option","themeName","reducer","state","action","type","data","constructor","Array","which","Object","true_false","listIdNotification","map","element","idNotification","includes","situation","message","filter","listResultTemp","listIdResultBefore","indexIfExistAlready","indexOf","result","index","unshift","region","whichNumber","valueCurrent","pairNumber","how","index1","findIndex","objPlayer","battletag","tag","status"],"mappings":"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","sourcesContent":["import {getTimeStamp} from '../tools/vanilla/time'\nimport {toggleArrayElement} from '../tools/vanilla/array'\n\n//const REPLACE_RERENDER = \"REPLACE_RERENDER\";\nconst REPLACE_READY = \"REPLACE_READY\";\nconst REPLACE_LOADING = \"REPLACE_LOADING\";\nconst REPLACE_WORKING = \"REPLACE_WORKING\";\n\nconst REPLACE_DATA = \"REPLACE_DATA\";\n\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\n\nconst ADD_RESULT = \"ADD_RESULT\";\nconst REPLACE_PLAYER_TAGS = \"REPLACE_PLAYER_TAGS\";\nconst REPLACE_PLAYER_STATUS = \"REPLACE_PLAYER_STATUS\";\nconst REPLACE_REGION = \"REPLACE_REGION\";\nconst REPLACE_NUMBER = \"REPLACE_NUMBER\";\n\n\nconst stateInitial = { \n    \n    // foundamental \n    /*\n    rerender: {\n      planTeam: \"\"\n    }*/\n    \n    ready : {\n      planTeam: false\n    }\n    \n    ,loading : {\n      planTeam: false\n    }\n    \n    \n    ,working : {\n      createPlan: false\n      \n      ,addPlayer: false\n      ,putPlayerMmr: false\n      ,addPlayerToListPlayerEntry: false\n      ,addPlayerMmrStandardToListPlayerEntry: false\n    }\n    \n    ,notification : []\n    \n    \n    // others\n    ,authority: \"unknown\" // \"administrator\" \"viewer\"\n    \n    ,idPlanTeam: \"\"\n    \n    ,planTeam: {\n      _id:\"_id\"\n      ,password:\"password\"\n      ,title:\"title\"\n      ,listResult:[]\n      ,listPlayerEntry: [\n        {\n          _id: \"test\"\n          , tags: []\n        }\n      ]\n      , option: {}\n    }\n    \n    \n    ,themeName: \"light\"\n    \n  };\n\n\n\nconst reducer = (\n  \n  // 기본값 설정\n  state = stateInitial, \n  \n  // 액션별로 새로운 state 반환하기\n  action) => {\n    \n  switch (action.type) {\n    \n    /*\n    case REPLACE_RERENDER:\n      return {\n      \t...state, \n      \trerender: {\n      \t  ...state.rerender\n      \t  ,[action.which]: getTimeStamp()\n      \t}\n      };\n      */\n      \n    case REPLACE_DATA:\n      \n      if ( (!!action.data) && (action.data.constructor === Array) ) {\n        return {\n      \t...state, \n      \t[action.which]: [...action.data]\n        }\n      }\n      \n      else if ( (!!action.data) && (action.data.constructor === Object) ) {\n        return {\n      \t...state, \n      \t[action.which]: {...action.data}\n        }\n      }\n      else {\n        return {\n        \t...state, \n        \t[action.which]: action.data\n        }\n      }\n      \n    case REPLACE_READY:\n      return {\n      \t...state, \n      \tready: {\n      \t  ...state.ready,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_LOADING:\n      return {\n      \t...state, \n      \tloading: {\n      \t  ...state.loading,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case REPLACE_WORKING:\n      return {\n      \t...state, \n      \tworking: {\n      \t  ...state.working,\n      \t  [action.which]: action.true_false\n      \t}\n      };\n      \n    case ADD_NOTIFICATION:\n      \n      const listIdNotification = state.notification.map(element => element.idNotification); // list of idNotification\n      if ( !(listIdNotification.includes(action.idNotification)) ) {  // 기존에 동일한 아이디의 알림이 없어야 추가\n        return {\n      \t...state, \n      \t\n      \tnotification: [\n      \t  {\n      \t    situation: action.situation\n      \t    ,message: action.message\n      \t    ,idNotification: action.idNotification\n      \t  }\n      \t  , ...state.notification\n      \t]\n      \t\n        };\n      }\n      else {return state}\n      \n      \n    \n    case REMOVE_NOTIFICATION:\n      return {\n      \t...state, \n      \tnotification: state.notification.filter(element => element.idNotification !== action.idNotification)\n      };\n    \n    \n    case ADD_RESULT:\n      // 같은 id의 result 가 이미 존재하는지 여부에 따라 행동 다르게!\n      \n      let listResultTemp = [...state.planTeam.listResult];\n      const listIdResultBefore = state.planTeam.listResult.map(element => element._id);\n      const indexIfExistAlready = listIdResultBefore.indexOf(action.result._id);\n      \n      if (indexIfExistAlready !== -1) { // if result same _id existed\n        listResultTemp = state.planTeam.listResult.filter((element, index) => index !== indexIfExistAlready)\n      }\n      else {\n        listResultTemp = listResultTemp.unshift(action.result);\n      }\n      \n      \n      return {\n      \t...state, \n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  , listResult: listResultTemp\n      \t}\n      } // return\n      \n      \n      \n      \n    case REPLACE_REGION:\n      return {\n      \t...state, \n      \t\n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  , option: {\n      \t    ...state.planTeam.option\n      \t    , region: action.region\n      \t  }\n      \t}\n      \t\n      };\n      \n    case REPLACE_NUMBER:\n      \n      let whichNumber;\n      let valueCurrent;\n      \n      if (action.which === \"team\") {\n        whichNumber = \"numberTeams\"\n        valueCurrent = action.pairNumber[0];\n      }\n      else if (action.which === \"group\") {\n        whichNumber = \"numberGroups\"\n        valueCurrent = action.pairNumber[1];\n      }\n      \n      \n        \n      \n      if (action.how === \"center\") {\n        return {\n          ...state,\n          planTeam: {\n            ...state.planTeam\n        \t  , option: {\n        \t    ...state.planTeam.option\n        \t    , [whichNumber]: 0\n        \t  }\n          }\n        }\n      }\n      else if  (action.how === \"plus\") {\n        return {\n          ...state,\n          planTeam: {\n            ...state.planTeam\n        \t  , option: {\n        \t    ...state.planTeam.option\n        \t    , [whichNumber]: ( (state.planTeam.option)[whichNumber] + 1)\n        \t  }\n          }\n        }\n      }\n      else if  (action.how === \"minus\" && !(valueCurrent == 0)) {\n        return {\n          ...state,\n          planTeam: {\n            ...state.planTeam\n        \t  , option: {\n        \t    ...state.planTeam.option\n        \t    , [whichNumber]: ( (state.planTeam.option)[whichNumber] - 1)\n        \t  }\n          }\n        }\n      }\n      else if  (action.how === \"minus\" && (valueCurrent == 0)) {\n        return {\n          ...state,\n          planTeam: {\n            ...state.planTeam\n        \t  , option: {\n        \t    ...state.planTeam.option\n        \t    , [whichNumber]: 0\n        \t  }\n          }\n        }\n      }\n       \n      \n    case REPLACE_PLAYER_TAGS:\n      \n      const index1 = (state.planTeam.listPlayerEntry).findIndex( objPlayer => objPlayer._id === action.battletag);\n      \n      \n      return {\n        ...state, \n      \t\n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  \n      \t  , listPlayerEntry: state.planTeam.listPlayerEntry.map(\n      \t      objPlayer => (objPlayer._id === action.battletag)? \n      \t        {...objPlayer, tags:toggleArrayElement(state.planTeam.listPlayerEntry[index1][\"tags\"], action.tag, action.true_false) }\n      \t        : objPlayer\n      \t    )\n      \t}\n      }\n    \n    case REPLACE_PLAYER_STATUS:\n      \n\n      return {\n        ...state, \n      \t\n      \tplanTeam: {\n      \t  ...state.planTeam\n      \t  \n      \t  , listPlayerEntry: state.planTeam.listPlayerEntry.map(\n      \t      objPlayer => (objPlayer._id === action.battletag)? \n      \t        {...objPlayer, status:action.status }\n      \t        : objPlayer\n      \t    )\n      \t}\n      }\n      \n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}